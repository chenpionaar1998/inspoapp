{"version":3,"sources":["Components/Account/duck/Types.ts","Components/Account/duck/Actions.ts","Components/Account/Signup/validator.ts","Components/Account/Signup/SignUpForm.tsx","Components/Account/Signup/ConnectedSignUpForm.ts","Components/Account/Signup/SignUp.tsx","Components/Account/SignIn/SignInForm.tsx","Components/Account/SignIn/ConnectedSignInForm.ts","Components/Account/SignIn/SignIn.tsx","Components/Dashboard/duck/Types.ts","Components/Dashboard/duck/Actions.ts","utils/strings.ts","Components/UIKit/PlanModal/util.ts","Components/UIKit/PlanModal/PlanModal.tsx","Components/UIKit/BoardItems/BoardItem.tsx","Components/UIKit/BoardItems/BoardItems.tsx","Components/UIKit/LoadingIndicator.tsx","Components/Dashboard/Dashboard.tsx","Components/Dashboard/ConnectedDashboard.tsx","Components/Router/PrivateRoute.tsx","Components/Router/ConnectedPrivateRoute.ts","Components/TopNavigationBar/TopBarMenuLink.tsx","Components/TopNavigationBar/TopBarProfile.tsx","Components/TopNavigationBar/TopNavigationBar.tsx","Components/TopNavigationBar/ConnectedTopNavigationBar.ts","Components/Router/Router.tsx","Components/Router/ConnectedRouter.ts","App.tsx","Components/Account/duck/Reducer.ts","Components/Dashboard/duck/Reducer.ts","RootReducer.tsx","serviceWorker.ts","index.tsx"],"names":["UPDATE_USER_INFO_ACTION","UPDATE_ACCOUNT_SIGNED_IN_ACTION","updateAccount","formData","type","userName","email","fname","lname","updateAccountSignedIn","signedIn","validator","rules","test","value","length","includes","message","errors","valid","state","password","RegExp","SignUpForm","showPassword","shouldShowCreateError","resetValidator","Object","entries","key","handleInputChange","event","inputPropName","setState","target","updateValidators","fieldName","forEach","rule","push","status","keys","field","displayValidationErrors","submitButton","document","getElementById","disabled","v","map","info","index","className","addUser","props","signUp","this","prevProps","history","e","preventDefault","prevState","id","name","placeholder","onChange","ref","onClick","to","React","Component","ConnectedSignUpForm","connect","ownProps","Account","dispatch","fetch","method","headers","body","JSON","stringify","then","response","json","result","correctUser","localStorage","setItem","batch","user","window","alert","SignUp","PureComponent","SignInForm","checkUser","signIn","ConnectedSignInForm","SignIn","INSERT_PLAN_ACTION","FETCH_PLAN_ACTION","EDIT_PLAN_ACTION","linkUserToPlan","success","str","isCreatePlan","buttonText","capitalize","charAt","toUpperCase","substring","trimTimeString","PlanModal","planID","item","uuid","v4","isOpen","hasDateError","title","start","end","toggleModal","Date","getTime","hasEmptyField","createPlan","stopPropagation","linkData","username","onLinkUser","editPlan","Button","outline","size","color","btn","buttonName","Modal","toggle","Input","style","display","ButtonToolbar","BoardItem","src","alt","BoardItems","items","i","LoadingIndicator","textAlign","Dashboard","fetchPlansFromDB","Container","Row","Col","md","lg","plans","ConnectedDashboard","Plans","plan","insertPlan","res","modifyPlan","planIDs","PrivateRoute","path","render","component","ConnectedPrivateRoute","TopBarMenuLink","icon","TopBarProfile","collapsed","Collapse","signOut","TopNavigationBar","ConnectedTopNavigationBar","clear","emptyForm","wrappedRoutes","exact","AppRouter","ConnectedRouter","Router","createBrowserHistory","App","initialState","action","plansArr","rootReducer","combineReducers","Boolean","location","hostname","match","ReactDOM","store","createStore","composeWithDevTools","applyMiddleware","thunk","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a787e319.chunk.js","sourcesContent":["// Libraries\nimport { Dispatch } from \"redux\";\n\nexport const UPDATE_USER_INFO_ACTION = \"@@USER/UPDATE_USER_INFO_ACTION\";\nexport const UPDATE_ACCOUNT_SIGNED_IN_ACTION = \"@@USER/UPDATE_ACCOUNT_SIGNED_IN_ACTION\"\n\nexport interface AccountState {\n    userName: string;\n    fname: string;\n    lname: string;\n    signedIn: boolean;\n} \n\nexport interface IUpdateUserInfoAction {\n    type: typeof UPDATE_USER_INFO_ACTION,\n    userName: string;\n    fname: string;\n    lname: string;\n}\n\nexport interface IUpdateAccountSignedInAction {\n    type: typeof UPDATE_ACCOUNT_SIGNED_IN_ACTION,\n    signedIn: boolean,\n}\n\nexport type UpdateUserInfoAction = (dispatch: Dispatch) => Promise<IUpdateUserInfoAction | void> | void;\n\nexport type AccountAction = IUpdateUserInfoAction | IUpdateAccountSignedInAction;","// Libraries\nimport { Dispatch } from \"redux\";\nimport { batch } from \"react-redux\";\n\n// Types\nimport { AccountInfoType } from \"../Signup/SignUpForm\";\nimport { SignInFormType } from \"../SignIn/SignInForm\";\nimport {UPDATE_USER_INFO_ACTION, \n        UPDATE_ACCOUNT_SIGNED_IN_ACTION,\n        IUpdateUserInfoAction,\n        IUpdateAccountSignedInAction,\n        UpdateUserInfoAction\n} from './Types';\n\nexport function signUp (formData: AccountInfoType): UpdateUserInfoAction {\n    return (dispatch: Dispatch) => {\n        fetch('/api/signUp', {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(formData)\n          })\n          .then(response => response.json())\n          .then(result => {\n            if (result.correctUser) {\n                localStorage.setItem(\"signedIn\", JSON.stringify(true));\n                localStorage.setItem(\"username\", formData.email);\n                localStorage.setItem(\"fname\", formData.fname);\n                localStorage.setItem(\"lname\", formData.lname);\n\n                return batch(() => {\n                    dispatch(updateAccount(result.user));\n                    dispatch(updateAccountSignedIn(true));\n                });                 \n            }\n            else {\n                localStorage.setItem(\"signedIn\", JSON.stringify(false));\n                dispatch(updateAccountSignedIn(false));\n                window.alert(\"The username is already taken\");\n            }\n          });\n    }\n}\n\nexport function signIn (formData: SignInFormType): UpdateUserInfoAction {\n    return (dispatch: Dispatch) => {\n        fetch('/api/signIn', {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(formData)\n        })\n        .then(response => response.json())\n        .then(result => {\n            if (result.correctUser) {\n                localStorage.setItem(\"signedIn\", JSON.stringify(true));\n                localStorage.setItem(\"username\", result.user.email);\n                localStorage.setItem(\"fname\", result.user.fname);\n                localStorage.setItem(\"lname\", result.user.lname);\n                return batch(() => {\n                    dispatch(updateAccount(result.user));\n                    dispatch(updateAccountSignedIn(true));\n                });\n            }\n            else {\n                localStorage.setItem(\"signedIn\", JSON.stringify(false));\n                dispatch(updateAccountSignedIn(false));\n\t\t\t\twindow.alert(\"The username or password you entered is incorrect\");\n            }\n        })\n    }\n}\n\nexport function signOut(): UpdateUserInfoAction {\n    localStorage.clear();\n\n    const emptyForm: AccountInfoType = {\n        email: \"\",\n        password: \"\",\n        fname:\"\",\n        lname: \"\"\n    }\n\n    return (dispatch: Dispatch) => {\n        return batch(() => {\n            dispatch(updateAccount(emptyForm));\n            dispatch(updateAccountSignedIn(false));\n        })\n    }\n}\n\nfunction updateAccount (formData: AccountInfoType): IUpdateUserInfoAction {\n    return {\n        type: UPDATE_USER_INFO_ACTION,\n        userName: formData.email,\n        fname: formData.fname,\n        lname: formData.lname\n    }\n}\n\nfunction updateAccountSignedIn (signedIn: boolean): IUpdateAccountSignedInAction {\n    return {\n        type: UPDATE_ACCOUNT_SIGNED_IN_ACTION,\n        signedIn\n    }\n} ","// Taken from https://www.codementor.io/muhammedali956/implementing-dynamic-form-validators-in-reactjs-6j7q0l8e7\nconst validator: validatorType= {\n    email: {\n        rules: [\n            {\n                test: (value: string) => {\n                    return value.length > 0 && value.includes('@');\n                },\n                message: 'Invalid email input'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    },\n    password: {\n        rules: [\n            {\n                test: (value: string) => {\n                    const reg = RegExp(/^(?=.*[a-z])(?=.*[A-Z]).*$/);\n                    return reg.test(value) || value.length >= 8 ;\n                },\n                message: 'Password must contain at least one lowercase letter, one uppercase letter and be at least 8 characters long'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    },\n    fname: {\n        rules: [\n            {\n                test: (value: string) => {\n                    return value.length > 0;\n                },\n                message: 'First name cannot be empty'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    },\n    lname: {\n        rules: [\n            {\n                test: (value: string) => {\n                    return value.length > 0;\n                },\n                message: 'Last name cannot be empty'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    }\n}\n\nexport type validatorType = {\n    [key: string]: validatorObject;\n}\n\nexport type validatorObject = {\n    rules: Array<ruleType>;\n    errors: Array<string>;\n    valid: boolean;\n    state: string;\n}\n\ntype ruleType = {\n    test: (value: string) => boolean;\n    message: string;\n}\n\nexport default validator;","// Libraries\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\n\n// Icons\nimport EyeIcon from 'mdi-react/EyeIcon';\nimport KeyVariantIcon from 'mdi-react/KeyVariantIcon';\nimport AccountOutlineIcon from 'mdi-react/AccountOutlineIcon';\nimport MailRuIcon from 'mdi-react/MailRuIcon';\n\n// Components\nimport validator, {validatorType} from './validator';\n\n// Styles\nimport '../../../Scss/form.scss';\n\n// Types \nimport { UpdateUserInfoAction } from '../duck/Types';\n\ntype SignUpFormState = {\n  email: string;\n  password: string;\n  fname: string;\n  lname: string;\n  showPassword: boolean;\n  shouldShowCreateError: boolean;\n}\n\ntype SignUpFormProps = {\n  signedIn: boolean;\n  history: any;\n  signUp: (formData: AccountInfoType) => UpdateUserInfoAction;\n}\n\nexport type AccountInfoType = {\n  email: string;\n  password: string;\n  fname: string;\n  lname: string;\n}\n\nexport default class SignUpForm extends React.Component<SignUpFormProps, SignUpFormState> {\n  state = {\n    email: '',\n    password: '',\n    fname: '',\n    lname: '',\n    showPassword: false,\n    shouldShowCreateError: false\n  };\n\n  validator: validatorType = validator;\n\n  componentDidMount() {\n    // Disable submit button\n    const submitButton = document.getElementById(\"submit\") as HTMLButtonElement;\n    if (submitButton) {\n      submitButton.disabled = true;\n    }\n\n    // Initialize validator\n    this.resetValidator();\n  }\n\n  componentDidUpdate(prevProps: SignUpFormProps) {\n\t\tif (this.props.signedIn && this.props.signedIn !== prevProps.signedIn) {\n\t\t\tthis.props.history.push('/dashboard_default');\n\t\t}\n\t}\n\n  resetValidator = () => {\n    for (let key of Object.entries(validator)) {\n      key[1].errors = [];\n      key[1].state = '';\n      key[1].valid = false;\n    }\n  }\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>, inputPropName: string) => {\n    this.setState<never>( {\n      [inputPropName] : event.target.value\n    });\n\n    this.updateValidators(inputPropName, event.target.value);\n  }\n\n  updateValidators = (fieldName: string, value: string) => {\n    this.validator[fieldName].errors = [];\n    this.validator[fieldName].state = value;\n    this.validator[fieldName].valid = true;\n    this.validator[fieldName].rules.forEach((rule) => {\n        if (!rule.test(value)) {\n          this.validator[fieldName].errors.push(rule.message);\n          this.validator[fieldName].valid = false;\n        }\n      }\n    );\n\n    let status = true;\n    Object.keys(this.validator).forEach((field) => {\n      if (!this.validator[field].valid) {\n        status = false;\n      }\n    });\n\n    this.displayValidationErrors(fieldName);\n\n    const submitButton = document.getElementById('submit') as HTMLButtonElement;\n    if (submitButton) {\n      submitButton.disabled = status ? false : true;\n    }\n  }\n\n  displayValidationErrors = (fieldName: string) => {\n    const v = this.validator[fieldName];\n    const result = '';\n    if (!v.valid) {\n      const errors = v.errors.map((info, index) => {\n        return (\n          <div key={index} className=\"error_div\">\n            <span className=\"error\"> {info}</span>\n            <br />\n          </ div>\n        );\n      });\n      return errors;\n    }\n    return result;\n  }\n\n  showPassword(e: React.MouseEvent): void {\n    e.preventDefault();\n    this.setState((prevState: SignUpFormState) => ({ showPassword: !prevState.showPassword }));\n  }\n\n  addUser = (): void => {\n    let formData: AccountInfoType = {\n      fname: this.state.fname,\n      lname: this.state.lname,\n      email: this.state.email,\n      password: this.state.password,\n    }\n\n    this.props.signUp(formData);\n  }\n\n  render() {\n    const { showPassword } = this.state;\n\n    return (\n      <form className=\"form\" >\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">First name</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <AccountOutlineIcon />\n            </div>\n            <input\n              id = \"fname\"\n              type = \"text\"\n              name = \"fname\"\n              placeholder = \"First name\"\n              value = {this.state.fname}\n              onChange={event => this.handleInputChange(event, 'fname')} \n            />\n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('fname')}\n          </div>\n        </div>\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">Last name</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <AccountOutlineIcon />\n            </div>\n            <input\n              id=\"lname\"\n              type=\"text\"\n              name=\"lname\"\n              placeholder=\"Last name\"  \n              value = {this.state.lname}           \n              onChange={event => this.handleInputChange(event, 'lname')}\n            /> \n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('lname')}\n          </div>        \n        </div>\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">E-mail</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <MailRuIcon />\n            </div>\n            <input\n              id=\"email\"\n              type=\"email\"\n              ref=\"email\"\n              name=\"email\"\n              placeholder=\"example@mail.com\"\n              value = {this.state.email}\n              onChange={event => this.handleInputChange(event, 'email')}\n            />\n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('email')}\n          </div>        \n        </div>\n        <div className=\"form_form-group form_form-group--forgot\">\n          <span className=\"form_form-group-label\">Password</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <KeyVariantIcon />\n            </div>\n            <input\n              id=\"password\"\n              ref=\"password\"\n              name=\"password\"\n              type={this.state.showPassword ? 'text' : 'password'}\n              placeholder=\"Password\"\n              value = {this.state.password}\n              onChange={event => this.handleInputChange(event, 'password')}\n            />\n            <button\n              type=\"button\"\n              className={`form_form-group-button${showPassword ? ' active' : ''}`}\n              onClick={e => this.showPassword(e)}\n            ><EyeIcon />\n            </button>\n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('password')}\n          </div>        \n        </div>\n        <div className=\"account_btns\">\n          <Link id=\"submit\" className=\"btn btn-primary account_btn\" to={`/dashboard_default`} onClick={this.addUser}>Sign Up</Link>\n        </div>\n      </form>\n    );\n  }\n}","// Libraries\nimport { connect } from \"react-redux\";\n\n// Actions\nimport { signUp } from '../duck/Actions';\nimport SignUpForm from \"./SignUpForm\";\n\n// Types\nimport { AppState } from '../../../RootReducer'\n\ntype ConnectedSignInProps = {\n    history: any;\n}\n\nconst mapStateToProps = (state: AppState, ownProps: ConnectedSignInProps) => ({\n    signedIn: state.Account.signedIn,\n    history: ownProps.history\n});\n\nconst ConnectedSignUpForm = connect(\n    mapStateToProps,\n    {\n        signUp: signUp\n    }\n)(SignUpForm as any)\n\nexport default ConnectedSignUpForm;","// Libraries\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Components\nimport ConnectedSignUpForm from './ConnectedSignUpForm';\n\n// Styles\nimport '../account.scss';\n\ntype SignupProps = {\n    history: any;\n}\n\nexport default class SignUp extends React.PureComponent<SignupProps> {\n    render() {\n        return (\n            <div className=\"account\">\n                <div className=\"account_wrapper\">\n                <div className=\"account_card\">\n                    <ConnectedSignUpForm history={this.props.history}/>\n                    <div className=\"account_have-account\">\n                        <span>Already have an account? <Link to=\"/signin\">Login</Link></span>\n                    </div>\n                </div>\n                </div>\n            </div>\n        )\n    }\n};\n","// Libraries\nimport React, { PureComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Icons\nimport EyeIcon from \"mdi-react/EyeIcon\";\nimport KeyVariantIcon from \"mdi-react/KeyVariantIcon\";\nimport AccountOutlineIcon from \"mdi-react/AccountOutlineIcon\";\n\n// Types \nimport { UpdateUserInfoAction } from '../duck/Types';\n\ntype SignInFormState = {\n\temail: string,\n\tpassword: string,\n    showPassword: boolean,\n}\n\ntype SignInFormProps = {\n\thistory: any;\n\tsignedIn: boolean;\n\tsignIn: (formData: SignInFormType) => UpdateUserInfoAction;\n}\n\nexport type SignInFormType = {\n\temail: string,\n\tpassword: string\n}\n\nexport default class SignInForm extends PureComponent<SignInFormProps, SignInFormState> {\n    state = {\n\t\temail: \"\",\n \t\tpassword: \"\",\n        showPassword: false\n    }\n\n\tcomponentDidUpdate(prevProps: SignInFormProps) {\n\t\tif (this.props.signedIn && this.props.signedIn !== prevProps.signedIn) {\n\t\t\tthis.props.history.push('/dashboard_default');\n\t\t}\n\t}\n\n\tcheckUser = (e: React.MouseEvent): void => {\n\t\t//fetch the data from loginUser\n\t\te.preventDefault();\n\n\t\tlet formData: SignInFormType = {\n\t\t\temail: this.state.email,\n\t\t\tpassword: this.state.password\n\t\t};\n\n\t\tthis.props.signIn(formData);\n\t}\n\n\thandleInputChange = (event: React.ChangeEvent<HTMLInputElement>, inputPropName: string): void => {\n\t\tthis.setState<never>( {\n\t\t\t[inputPropName] : event.target.value\n\t\t});\n\t}\n\n\tshowPassword = (e: React.MouseEvent): void => {\n\t\te.preventDefault();\n\t\tthis.setState(prevState => ({ showPassword: !prevState.showPassword }));\n\t}\n\n\trender() {\n\t\tconst { showPassword } = this.state;\n\n\t\treturn (\n\t\t\t<form className=\"form\">\n\t\t\t\t<div className=\"form_form-group\">\n\t\t\t\t\t<span className=\"form_form-group-label\">Username</span>\n\t\t\t\t\t<div className=\"form_form-group-field\">\n\t\t\t\t\t\t<div className=\"form_form-group-icon\">\n\t\t\t\t\t\t\t<AccountOutlineIcon />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Username\"\n \t\t\t\t\t\t\tvalue={this.state.email}\n \t\t\t\t\t\t\tonChange={event => this.handleInputChange(event, \"email\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"form_form-group\">\n\t\t\t\t\t<span className=\"form_form-group-label\">Password</span>\n\t\t\t\t\t<div className=\"form_form-group-field\">\n\t\t\t\t\t\t<div className=\"form_form-group-icon\">\n\t\t\t\t\t\t\t<KeyVariantIcon />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\ttype={showPassword ? \"text\" : \"password\"}\n\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t\tvalue={this.state.password}\n \t\t\t\t\t\t\tonChange={event => this.handleInputChange(event, \"password\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclassName={`form_form-group-button${\n\t\t\t\t\t\t\t\tshowPassword ? \" active\" : \"\"\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\tonClick={this.showPassword}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<EyeIcon />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"account_btns\">\n\t\t\t\t\t<Link\n\t\t\t\t\t\tclassName=\"btn btn-primary account_btn\"\n\t\t\t\t\t\tto={`/dashboard_default`}\n \t\t\t\t\t\tonClick={this.checkUser}\n\t\t\t\t\t>\n\t\t\t\t\t\tSign In\n\t\t\t\t\t</Link>\n\t\t\t\t\t<Link className=\"btn btn-outline-primary account_btn\" to=\"/signup\">\n\t\t\t\t\t\tCreate Account\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t);\n\t}\n}\n","// Libraries\nimport { connect } from \"react-redux\";\n\n// Actions\nimport { signIn } from '../duck/Actions';\n\n// Componenets\nimport SignInForm from \"./SignInForm\";\n\n// Types\nimport { AppState } from '../../../RootReducer'\n\ntype ConnectedSignInProps = {\n    history: any;\n}\n\nconst mapStateToProps = (state: AppState, ownProps: ConnectedSignInProps) => ({\n    signedIn: state.Account.signedIn,\n    history: ownProps.history\n});\n\nconst ConnectedSignInForm = connect(\n    mapStateToProps,\n    {\n        signIn: signIn\n    }\n)(SignInForm as any)\n\nexport default ConnectedSignInForm; ","// Libraries\nimport React from 'react';\n\n// Components\nimport ConnectedSignInForm from './ConnectedSignInForm';\n\ntype SigninProps = {\n    history: any;\n}\n\nexport default class SignIn extends React.PureComponent<SigninProps> {\n    render() {\n        return (\n            <div className=\"account\">\n                <div className=\"account_wrapper\">\n                    <div className=\"account_card\">\n                        <ConnectedSignInForm history={this.props.history}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","// Libraries\nimport { Dispatch } from 'redux';\n\n// Types\nimport { TravelPlanInfoType } from '../../UIKit/PlanModal/types';\n\nexport const INSERT_PLAN_ACTION = \"@@DASHBOARD/INSERT_PLAN_ACTION\";\nexport const FETCH_PLAN_ACTION = \"@@DASHBOARD/FETCH_PLAN_ACTION\";\nexport const EDIT_PLAN_ACTION = \"@@DASHBOARD/EDIT_PLAN_ACTION\";\nexport const DELETE_PLAN_ACTION = \"@@DASHBOARD/DELETE_PLAN_ACTION\";\n\nexport interface DashboardState {\n    plans: TravelPlanInfoType[];\n}\n\nexport interface IInsertPlanAction {\n    type: typeof INSERT_PLAN_ACTION,\n    plan: TravelPlanInfoType\n}\n\nexport interface IFetchPlanAction {\n    type: typeof FETCH_PLAN_ACTION,\n    plans: TravelPlanInfoType[]\n}\n\nexport interface IEditPlanAction {\n    type: typeof EDIT_PLAN_ACTION,\n    plan: TravelPlanInfoType\n}\n\nexport interface IDeletePlanAction {\n    type: typeof DELETE_PLAN_ACTION,\n    plan: TravelPlanInfoType\n}\n\nexport type InsertPlanAction = (dispatch: Dispatch) => Promise<IInsertPlanAction | void> | void;\nexport type FetchPlanAction = (dispatch: Dispatch) => Promise<IFetchPlanAction | void | unknown> | void;\nexport type EditPlanAction = (dispatch: Dispatch) => Promise<IEditPlanAction | void> | void;\n\nexport type DashboardAction = IInsertPlanAction | IFetchPlanAction | IEditPlanAction;","// Libraries\nimport { Dispatch } from \"redux\";\n\n// Types\nimport { TravelPlanInfoType, UserPlanLinkType } from \"../../UIKit/PlanModal/types\";\nimport {\n    INSERT_PLAN_ACTION,\n    IInsertPlanAction,\n    InsertPlanAction,\n    FetchPlanAction,\n    IFetchPlanAction,\n    FETCH_PLAN_ACTION,\n    EDIT_PLAN_ACTION,\n    IEditPlanAction,\n    EditPlanAction\n} from \"./Types\";\n\nexport function createPlan (formData: TravelPlanInfoType): InsertPlanAction {\n    return (dispatch: Dispatch) => {\n        fetch('/api/createPlan', {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(formData)\n        })\n        .then(response => response.json())\n        .then(result => {\n            if (result.success) {\n                return dispatch(insertPlan(formData));\n            }\n            else {\n                // add error state dispatch\n            }\n        });\n    }\n}\n\nexport function linkUserToPlan (formData: UserPlanLinkType): void {\n    fetch('/api/linkUserToPlan', {\n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData)\n    })\n    .then(response => response.json())\n    .then(result => {\n        if (!result.success) {\n            // add error state \n        }\n    });\n}\n\nexport function fetchPlansFromDB (username: string): FetchPlanAction {\n    return (dispatch: Dispatch) => {\n        fetch('/api/fetchPlansForUser', {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({email: username})\n        })\n        .then(response => response.json())\n        .then(res => {\n            if (res.success) {\n                // if the query was successful we use the ids we got to query the details of the plans\n                fetch('/api/getPlansInfoWithID', {\n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify(res.planIDs)\n                })\n                .then(response => response.json())\n                .then(res => {\n                    if (res.success) {\n                        return dispatch(fetchPlans(res.plans));\n                    }\n                });\n            }\n        });\n    }\n}\n\nexport function editPlan (formData: TravelPlanInfoType): EditPlanAction {\n    return (dispatch: Dispatch) => {\n        fetch('/api/editPlan', {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(formData)\n        })\n        .then(response => response.json())\n        .then(res => {\n            if (res.success) {\n                return dispatch(modifyPlan(formData));\n            }\n        });\n    }\n}\n\nexport function deletePlan (planID: string): any {}\n\nfunction insertPlan (formData: TravelPlanInfoType): IInsertPlanAction {\n    return {\n        type: INSERT_PLAN_ACTION,\n        plan: formData\n    }\n}\n\nfunction fetchPlans (plans: TravelPlanInfoType[]): IFetchPlanAction {\n    return {\n        type: FETCH_PLAN_ACTION,\n        plans: plans\n    }\n}\n\nfunction modifyPlan (formData: TravelPlanInfoType): IEditPlanAction {\n    return {\n        type: EDIT_PLAN_ACTION,\n        plan: formData\n    }\n}\n","export const isTrue = (str: string): boolean => {\n    return str === \"true\";\n}\n\nexport const capitalize = (str: string): string => {\n    return str.length ? str.charAt(0).toUpperCase() + str.substring(1) : str;\n}\n\nexport const trimTimeString = (str: string): string => {\n    return str.substring(0,10);\n}","export const isCreatePlan = (buttonText: string): boolean => {\n    return buttonText === \"Create\";\n}","// Libraries\nimport React from 'react';\nimport { Button, ButtonToolbar, Modal, Input } from 'reactstrap';\nimport uuid from 'uuid';\n\n// Types\nimport { TravelPlanInfoType, UserPlanLinkType } from './types';\nimport { InsertPlanAction, EditPlanAction } from '../../Dashboard/duck/Types';\n\n// Util\nimport { isCreatePlan } from './util';\nimport { trimTimeString } from '../../../utils/strings';\n\ntype PlanModalProps = {\n    username: string;\n    item?: TravelPlanInfoType;\n    buttonName: string;\n    buttonText: string;\n    onClick: (formData: TravelPlanInfoType)=> InsertPlanAction | EditPlanAction;\n    onLinkUser?: (formdata: UserPlanLinkType) => void;\n}\n\ntype PlanModalState = {\n    planID: string;\n    isOpen: boolean;\n    hasDateError: boolean;\n    title: string;\n    start: string;\n    end: string;\n}\n\nexport default class PlanModal extends React.PureComponent<PlanModalProps, PlanModalState> {\n    state = {\n        planID: this.props.item ? this.props.item.planID : uuid.v4(),\n        isOpen: false,\n        hasDateError: false,\n        title: \"\",\n        start: \"\",\n        end: \"\"\n    }\n\n    toggleModal = (): void => {\n        if (this.props.item && isCreatePlan(this.props.buttonText)){\n            this.setState(prevState => ({ \n                isOpen: !prevState.isOpen,\n                hasDateError: false,\n                title: \"\",\n                start: \"\",\n                end: \"\"\n            }));\n        }\n        else {\n            this.setState(prevState => ({\n                isOpen: !prevState.isOpen,\n                hasDateError: false,\n                title: this.props.item ? this.props.item.title : \"\",\n                start: this.props.item ? trimTimeString(this.props.item.start) : \"\",\n                end: this.props.item ? trimTimeString(this.props.item.end) : \"\"\n            }))\n        }\n    }\n\n\thandleInputChange = (event: React.ChangeEvent<HTMLInputElement>, inputPropName: string): void => {\n\t\tthis.setState<never>( {\n\t\t\t[inputPropName] : event.target.value\n        }, () => {\n            if (inputPropName === \"start\" || inputPropName === \"end\") {\n                if (this.state.start !== \"\" && this.state.end !== \"\") {\n                    // Check end date and start date\n                    const start = new Date(this.state.start);\n                    const end = new Date(this.state.end);\n\n                    if (start.getTime() > end.getTime()) {\n                        this.setState({ hasDateError: true });\n                    }\n                    else {\n                        this.setState({ hasDateError: false });\n                    }\n                }\n            }\n        });\n    }\n    \n    hasEmptyField = (): boolean | undefined => {\n        return this.state.title === \"\" || this.state.start === \"\" || this.state.end === \"\" || this.state.hasDateError;\n    }\n\n    createPlan = (e: React.MouseEvent): void => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const formData: TravelPlanInfoType = {\n            planID: this.state.planID,\n            title: this.state.title,\n            start: this.state.start,\n            end: this.state.end\n        }\n\n        const linkData: UserPlanLinkType = {\n            email: this.props.username,\n            planID: this.state.planID\n        }\n\n        this.props.onClick(formData);\n        this.props.onLinkUser && this.props.onLinkUser(linkData);\n\n        this.toggleModal();\n    }\n\n    editPlan = (e: React.MouseEvent): void => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const formData: TravelPlanInfoType = {\n            planID: this.state.planID,\n            title: this.state.title,\n            start: this.state.start,\n            end: this.state.end\n        }\n\n        this.props.onClick(formData);\n\n        this.toggleModal();\n    }\n\n    render() {\n        return (\n            <div  className=\"theme-light wrapper squared-corner-theme blocks-with-shadow-theme top-navigation\">\n                <Button\n                    outline={false}\n                    size='sm'\n                    color='primary'\n                    btn={this.props.buttonName}\n                    className=\"icon account_btn\"\n                    onClick={this.toggleModal}\n                >\n                    {this.props.buttonText} Plan\n                </Button>\n                <Modal\n                    isOpen={this.state.isOpen}\n                    toggle={this.toggleModal}\n                    className={\"modal-dialog--primary theme-light\"}\n                >\n                    <div className=\"modal_header\">\n                        <button className=\"lnr lnr-cross modal_close-btn\" type=\"button\" onClick={this.toggleModal} />\n                        <h4 className=\"modal_title\">{this.props.buttonName}</h4>\n                    </div>\n                    <div className=\"dashboard_place-order-form\">\n                    <form className=\"form form--vertical\" >\n                            <div className=\"form_form-group\">\n                                <span className=\"form_form-group-label\">Plan Title</span>\n                                <div className=\"form_form-group-field\">\n                                    <Input\n                                        name=\"title\"\n                                        type=\"text\"\n                                        placeholder=\"Title\"\n                                        value={this.state.title}\n                                        onChange={event => this.handleInputChange(event, \"title\")}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"form_form-group\">\n                                <span className=\"form_form-group-label\">Start Date</span>\n                                <div className=\"form_form-group-field\">\n                                    <Input\n                                        name=\"startDate\"\n                                        type=\"date\"\n                                        placeholder=\"yyyy-mm-dd\"\n                                        value={this.state.start}\n                                        onChange={event => this.handleInputChange(event, \"start\")}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"form_form-group\">\n                                <span className=\"form_form-group-label\">End Date</span>\n                                <div className=\"form_form-group-field\">\n                                    <Input\n                                        name=\"endDate\"\n                                        type=\"date\"\n                                        placeholder=\"yyyy-mm-dd\"\n                                        value={this.state.end}\n                                        onChange={event => this.handleInputChange(event, \"end\")}\n                                    />\n                                </div>\n                                <span style={{display: this.state.hasDateError ? \"\" : \"none\", color: \"red\"}}>The end date needs to be after the start date.</span>\n                            </div>\n                            <ButtonToolbar className=\"modal_footer\">\n                                <Button outline={false} color=\"primary\" type=\"submit\" disabled={this.hasEmptyField()} onClick={this.props.buttonText === \"Create\" ? this.createPlan : this.editPlan}>{this.props.buttonText}</Button>\n                                <Button onClick={this.toggleModal}>Cancel</Button>\n                            </ButtonToolbar>\n                        </form>\n                    </div>\n                </Modal>\n            </div>\n        )\n    }\n}","// Libraries\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Components\nimport PlanModal from '../PlanModal/PlanModal';\n\n// Actions\nimport { EditPlanAction } from '../../Dashboard/duck/Types';\n\n// Types\nimport { TravelPlanInfoType } from '../PlanModal/types';\n\n// Utils\nimport { trimTimeString } from '../../../utils/strings';\n\ntype BoardItemProps = {\n    item: TravelPlanInfoType;\n    username: string;\n    editPlan: (formData: TravelPlanInfoType) => EditPlanAction;\n}\n\nexport default class BoardItem extends React.PureComponent<BoardItemProps> {\n    render() {\n        return (\n            <div className=\"board\">\n              <Link className=\"board_link\" to={'/'}>\n                <div className=\"board_img-wrap\">\n                  <img className=\"board_img\" src={\"\"} alt=\"board-img\" />\n                </div>\n                <div className=\"board_info\">\n                  <h4 className=\"board_title\">{this.props.item.title}</h4>\n                <p className=\"board_description\">{trimTimeString(this.props.item.start)}</p>\n                  {/*{item.collaborators.map((c, index) => (\n                    <span\n                      key={index}\n                    />\n                  ))} */}\n                </div>\n              </Link>\n              <div className=\"board_btn\">\n                <PlanModal\n                    item={this.props.item}\n                    username={this.props.username}\n                    buttonName=\"Edit plan\"\n                    buttonText=\"Edit\"\n                    onClick={this.props.editPlan}\n                />\n                {/* <button className=\"lnr lnr-cross board_close-btn\" type=\"button\" onClick={e => this.handleDelete(e, item.planID)} /> */}\n              </div>\n            </div>\n        )\n    }\n}","// Libraries\nimport React from 'react';\n\n// Types\nimport { TravelPlanInfoType } from '../PlanModal/types';\n\n// Actions\nimport { EditPlanAction } from '../../Dashboard/duck/Types';\n\n// Components\nimport BoardItem from './BoardItem';\n\ntype BoardItemsProps = {\n    username: string;\n    items: TravelPlanInfoType[];\n    editPlan: (formData: TravelPlanInfoType) => EditPlanAction;\n}\n\nexport default class BoardItems extends React.PureComponent<BoardItemsProps> {\n    \n  render() {\n    return (\n      <div className=\"boards_wrap\">\n        <div className=\"boards\">\n          {this.props.items.map((item, i) => (\n            <BoardItem\n              key={item.planID}\n              item={item}\n              username={this.props.username}\n              editPlan={this.props.editPlan}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\n\nexport default class LoadingIndicator extends React.PureComponent {\n    render() {\n        return (\n            <div style={{textAlign: \"center\"}}>\n                <div className=\"loader_container\">\n                    <div className=\"loading_indicator\"/>\n                </div>\n                <span>\n                    Fetching your plans from the database...\n                </span>\n            </div>\n        )\n    }\n}","// Libraries \nimport React from \"react\";\nimport { Col, Container, Row } from \"reactstrap\";\n\n// Components\nimport PlanModal from '../UIKit/PlanModal/PlanModal';\nimport BoardItems from \"../UIKit/BoardItems/BoardItems\";\nimport LoadingIndicator from '../UIKit/LoadingIndicator';\n\n// Types\nimport { TravelPlanInfoType } from '../UIKit/PlanModal/types';\nimport { InsertPlanAction, FetchPlanAction, EditPlanAction } from './duck/Types';\n\n// Actions\nimport { linkUserToPlan } from \"./duck/Actions\";\n\ntype DashboardProps = {\n    username: string;\n    plans: TravelPlanInfoType[];\n    createPlan: (formData: TravelPlanInfoType) => InsertPlanAction;\n    editPlan: (formData: TravelPlanInfoType) => EditPlanAction;\n    fetchPlansFromDB: (username: string) => FetchPlanAction;\n}\n\nclass Dashboard extends React.PureComponent<DashboardProps> {\n    componentDidMount () {\n        this.props.fetchPlansFromDB(this.props.username);\n    }\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Col md={12}>\n                        <h3 className=\"page-title\">Boards</h3>\n                        <h3 className=\"page-subhead subhead\">\n\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\tClick on a board to view your activity\n\t\t\t\t\t\t</h3>\n                        <div className=\"board_createbtn\">\n\t\t\t\t\t\t\t<PlanModal\n                                username={this.props.username}\n                                buttonName=\"Create a Plan\"\n                                buttonText=\"Create\"\n                                onClick={this.props.createPlan}\n                                onLinkUser={linkUserToPlan}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12} lg={12}>\n                        {this.props.plans.length === 0 &&  \n                            <LoadingIndicator />\n                        }\n                        <BoardItems\n                            username={this.props.username}\n                            items={this.props.plans}\n                            editPlan={this.props.editPlan}\n                        />\n                    </Col>\n\t\t\t\t</Row>\n            </Container>\n        )\n    }\n}\n\nexport default Dashboard;","// Libraries\nimport { connect } from \"react-redux\";\n\n// Actions\nimport { createPlan, fetchPlansFromDB, editPlan } from './duck/Actions'\n\n// Components\nimport Dashboard from './Dashboard';\n\n// Types\nimport { AppState } from '../../RootReducer';\n\nconst mapStateToProps = (state: AppState) => ({\n    username: state.Account.userName,\n    plans: state.Plans.plans\n});\n\nconst ConnectedDashboard = connect(\n    mapStateToProps,\n    {\n        createPlan: createPlan,\n        editPlan: editPlan,\n        fetchPlansFromDB: fetchPlansFromDB\n    }\n)(Dashboard as any)\n\nexport default ConnectedDashboard;","// Libraries\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\ntype PrivateRouteProps = {\n    signedIn: boolean,\n    path: string,\n\tcomponent: any\n}\n\nexport default class PrivateRoute extends React.PureComponent<PrivateRouteProps> {\n    render() {\n        return (\n            this.props.signedIn ? (\n                <Route path={this.props.path} render={props => \n                    <this.props.component {...props}/>\n                }/>\n            ): <Redirect to=\"/\"/>\n        );\n    }\n}\n","// Libraries\nimport { connect } from \"react-redux\";\n\n// Components\nimport PrivateRoute from \"./PrivateRoute\"\n\n// Types\nimport { AppState } from '../../RootReducer'\n\ntype PrivateRouteProps = {\n    path: string,\n\tcomponent: any\n}\n\nconst mapStateToProps = (state: AppState, ownProps: PrivateRouteProps) => ({\n    signedIn: state.Account.signedIn,\n    path: ownProps.path,\n    component: ownProps.component\n});\n\nconst ConnectedPrivateRoute = connect(\n    mapStateToProps,\n    null\n)(PrivateRoute as any)\n\nexport default ConnectedPrivateRoute; ","// Libraries\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\ntype TopBarMenuLinkProps = {\n    path: string;\n    icon: string;\n    title: string;\n    onClick?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;\n}\n\nexport default class TopBarMenuLink extends React.PureComponent<TopBarMenuLinkProps> {\n    render() {\n        return (\n            <Link className=\"topbar_link\" to={this.props.path} onClick={this.props.onClick}>\n                <span className={`topbar_link-icon lnr lnr-${this.props.icon}`} />\n                <p className=\"topbar_link-title\">{this.props.title}</p>\n            </Link>\n        )\n    }\n}","// Libraries\nimport React from 'react';\nimport { Collapse } from 'reactstrap';\n\n// Icons\nimport DownIcon from 'mdi-react/ChevronDownIcon';\n\n// Types \nimport { UpdateUserInfoAction } from '../Account/duck/Types';\n\n// Components\nimport TopBarMenuLink from './TopBarMenuLink';\n\n// Utils\nimport {capitalize} from '../../utils/strings';\n\ntype TopBarProfileProps = {\n    fname: string;\n    lname: string;\n    signOut: () => UpdateUserInfoAction;\n}\n\ntype TopBarProfileState = {\n    collapsed: boolean;\n}\n\nexport default class TopBarProfile extends React.PureComponent<TopBarProfileProps, TopBarProfileState> {\n    state = {\n        collapsed: false\n    }\n\n    // Ava = `${process.env.PUBLIC_URL}/img/ava.png`;\n\n    toggle = () => {\n        this.setState(prevState => ({collapsed: !prevState.collapsed}));\n    }\n\n    render() {\n        return (\n            <div className=\"topbar_profile\">\n            <button className=\"topbar_avatar\" type=\"button\" onClick={this.toggle}>\n              {/* <img className=\"topbar_avatar-img\" src={this.Ava} alt=\"avatar\" /> */}\n              <p className=\"topbar_avatar-name\">{capitalize(this.props.fname) + \" \" + capitalize(this.props.lname)}</p>\n              <DownIcon className=\"topbar_icon\" />\n            </button>\n            {this.state.collapsed && <button className=\"topbar_back\" type=\"button\" onClick={this.toggle} />}\n            <Collapse isOpen={this.state.collapsed} className=\"topbar_menu-wrap\">\n              <div className=\"topbar_menu\">\n                <TopBarMenuLink title=\"My Profile\" icon=\"user\" path=\"/\" />\n                <TopBarMenuLink title=\"Sign Out\" icon=\"exit\" path=\"/\" onClick={this.props.signOut}/>\n              </div>\n            </Collapse>\n          </div>\n        )\n    }\n}","// Libraries\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Components\nimport TopBarProfile from './TopBarProfile';\n\n// Types \nimport { UpdateUserInfoAction } from '../Account/duck/Types';\n\ntype TopNavigationBarProps = {\n    fname: string;\n    lname: string;\n    signOut: () => UpdateUserInfoAction;\n}\n\nexport default class TopNavigationBar extends React.PureComponent<TopNavigationBarProps> {\n    render() {\n        return (\n            <div className={\"layout layout--top-navigation\"}>\n                <div className=\"topbar topbar--navigation\">\n                    <div className=\"topbar_wrapper\">\n                    <div className=\"topbar_left\">\n                        <Link className=\"topbar_logo\" to=\"/dashboard_default/\"/>\n                    </div>\n                    <div className=\"topbar_right\">\n                        <TopBarProfile fname={this.props.fname} lname={this.props.lname} signOut={this.props.signOut}/>\n                    </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","// Libraries\nimport { connect } from \"react-redux\";\n\n// Components\nimport TopNavigationBar from \"./TopNavigationBar\"\n\n// Types\nimport { AppState } from '../../RootReducer'\n\n// Actions\nimport {signOut} from '../Account/duck/Actions';\n\nconst mapStateToProps = (state: AppState) => ({\n    fname: state.Account.fname,\n    lname: state.Account.lname\n});\n\nconst ConnectedTopNavigationBar = connect(\n    mapStateToProps,\n    {\n        signOut: signOut\n    }\n)(TopNavigationBar as any)\n\nexport default ConnectedTopNavigationBar; ","// Libraries\nimport React from \"react\";\nimport { Router, Route, Switch, Redirect } from \"react-router-dom\";\n\n// Components \nimport SignUp from '../Account/Signup/SignUp';\nimport SignIn from '../Account/SignIn/SignIn';\nimport ConnectedDashboard from '../Dashboard/ConnectedDashboard';\nimport ConnectedPrivateRoute from './ConnectedPrivateRoute';\nimport ConnectedTopNavigationBar from '../TopNavigationBar/ConnectedTopNavigationBar';\n\ntype RouterProp = {\n    history: any;\n    signedIn: boolean;\n}\n\nconst wrappedRoutes = () => (\n    <div>\n        <ConnectedTopNavigationBar/>\n        <div className=\"container_wrap\">\n            <Route exact path=\"/dashboard_default\">\n                <ConnectedDashboard/>\n            </Route>\n        </div>\n    </div>\n)\n\nexport default class AppRouter extends React.PureComponent<RouterProp> {\n    render() {\n        return (\n            <Router history={this.props.history}>\n                <Switch>\n                    <Route exact path=\"/\">\n                        {\n                            this.props.signedIn ? \n                                <Redirect to=\"/dashboard_default\"/> :\n                                <SignIn history={this.props.history}/>\n                        }\n                    </Route>\n                    <Route exact path=\"/signup\">\n                        {\n                            this.props.signedIn ? \n                                <Redirect to=\"/dashboard_default\"/> :\n                                <SignUp history={this.props.history}/>\n                        }\n                    </Route>\n                    <Route path=\"/signin\">\n                        {\n                            this.props.signedIn ? \n                                <Redirect to=\"/dashboard_default\"/> :\n                                <SignIn history={this.props.history}/>\n                        }\n                    </Route>\n                    <ConnectedPrivateRoute path=\"/\" component={wrappedRoutes}/>\n                </Switch>\n            </Router>\n        );\n    }\n}","// Libraries\nimport { connect } from \"react-redux\";\n\n// Components\nimport Router from \"./Router\"\n\n// Types\nimport { AppState } from '../../RootReducer'\n\ntype RouterProps = {\n    history: any\n}\n\nconst mapStateToProps = (state: AppState, ownProps: RouterProps) => ({\n    signedIn: state.Account.signedIn,\n    history: ownProps.history\n});\n\nconst ConnectedRouter = connect(\n    mapStateToProps,\n    null\n)(Router as any)\n\nexport default ConnectedRouter; ","// Libraries\nimport React from 'react';\nimport { createBrowserHistory } from 'history';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n// Styles\nimport './App.scss';\n\n// Components\nimport ConnectedRouter from './Components/Router/ConnectedRouter';\n\nconst history = createBrowserHistory();\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"theme-light\">\n      <div className=\"wrapper squared-corner-theme blocks-with-shadow-theme top-navigation\">\n        <ConnectedRouter history={history}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// Types\nimport { AccountState,\n        AccountAction, \n        UPDATE_ACCOUNT_SIGNED_IN_ACTION,\n        UPDATE_USER_INFO_ACTION\n} from './Types';\n\n// Utils\nimport {isTrue} from \"../../../utils/strings\"\n\nconst initialState: AccountState  = {\n    userName: localStorage.username,\n    fname: localStorage.fname,\n    lname: localStorage.lname,\n    signedIn: isTrue(localStorage.signedIn)\n}\n\nconst Account = ( state: AccountState = initialState, action: AccountAction): AccountState => {\n    switch (action.type){\n        case UPDATE_USER_INFO_ACTION:\n            return {\n                userName: action.userName,\n                fname: action.fname,\n                lname: action.lname,\n                signedIn: state.signedIn,\n            }\n        case UPDATE_ACCOUNT_SIGNED_IN_ACTION:\n            return {\n                userName: state.userName,\n                fname: state.fname,\n                lname: state.lname,\n                signedIn: action.signedIn,\n            }\n        default: \n            return state;\n    }\n}\n\nexport default Account;","// Types\nimport { \n    DashboardState,\n    DashboardAction,\n    INSERT_PLAN_ACTION,\n    FETCH_PLAN_ACTION, \n    EDIT_PLAN_ACTION\n} from './Types';\nimport { TravelPlanInfoType } from '../../UIKit/PlanModal/types';\n\nconst initialState: DashboardState = {\n    plans: []\n}\n\nconst Plans = ( state: DashboardState = initialState, action: DashboardAction): DashboardState => {\n    switch( action.type ) {\n        case INSERT_PLAN_ACTION:\n            return {\n                plans: [...state.plans, action.plan]\n            }\n        case FETCH_PLAN_ACTION:\n            return {\n                plans: action.plans\n            }\n        case EDIT_PLAN_ACTION:\n            let plansArr: TravelPlanInfoType[] = [];\n            \n            state.plans.forEach(plan => {\n                if (plan.planID !== action.plan.planID) {\n                    plansArr.push(plan);\n                }\n                else {\n                    plansArr.push(action.plan);\n                }\n            })\n\n            return {\n                plans: plansArr\n            }\n        default:\n            return state;\n    }\n}\n\nexport default Plans;","// Libraries\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\n// Types\nimport { AccountState } from './Components/Account/duck/Types';\nimport { DashboardState } from './Components/Dashboard/duck/Types';\n\n// Reducers\nimport Account from './Components/Account/duck/Reducer';\nimport Plans from './Components/Dashboard/duck/Reducer';\n\nconst rootReducer = combineReducers({\n    Account,\n    Plans\n});\n\nexport type AppState = {\n    Account: AccountState;\n    Plans: DashboardState;\n}\n\nexport default function configureStore() {\n    return createStore (\n        rootReducer,\n        composeWithDevTools(\n            applyMiddleware(thunk)\n        )\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Libraries\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\n// Components\nimport App from './App';\nimport configureStore from './RootReducer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}