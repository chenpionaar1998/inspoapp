{"version":3,"sources":["Components/Account/Signup/SignUpForm.tsx","Components/Account/Signup/SignUp.tsx","Components/Account/SignIn/SignInForm.tsx","Components/Account/SignIn/SignIn.tsx","Components/Router/Router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SignUpForm","state","email","password","fname","lname","showPassword","USERINSERTED","addUser","e","submitButton","document","getElementById","disabled","preventDefault","this","setState","prevState","className","id","type","ref","name","placeholder","onClick","React","PureComponent","SignUp","to","SignInForm","userlogin","userLoggedin","SignIn","AppRouter","exact","path","compoonent","component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0aacfe45.chunk.js","sourcesContent":["// Libraries\nimport React from 'react';\n// import { Field, reduxForm } from 'redux-form';\n\n// Icons\nimport EyeIcon from 'mdi-react/EyeIcon';\nimport KeyVariantIcon from 'mdi-react/KeyVariantIcon';\nimport AccountOutlineIcon from 'mdi-react/AccountOutlineIcon';\nimport MailRuIcon from 'mdi-react/MailRuIcon';\n\n// Components\nimport validator, {validatorType} from './util';\n\n// Styles\nimport '../../../Scss/form.scss';\n\n\ntype SignUpFormState = {\n    email: string;\n    password: string;\n    fname: string;\n    lname: string;\n    showPassword: boolean;\n    USERINSERTED: boolean;\n    // validator: validatorType;\n\n}\n\nexport default class SignUpForm extends React.PureComponent<{}, SignUpFormState> {\n    state = {\n        email: '',\n        password: '',\n        fname: '',\n        lname: '',\n        showPassword: false,\n        USERINSERTED: false\n    };\n\n    // showPassword = showPassword.bind(this);\n\n//   constructor(props) {\n//     super(props);\n\n    // this.validator = validator;\n    // this.resetValidator();\n    // this.resetValidator = this.resetValidator.bind(this);\n    // this.handleInputChange = this.handleInputChange.bind(this);\n    // this.updateValidators = this.updateValidators.bind(this);\n    // this.displayValidationErrors = this.displayValidationErrors.bind(this);\n    // this.addUser = this.addUser.bind(this);\n\n    // this.fnameInput = React.createRef();\n    // this.lnameInput = React.createRef();\n    // this.emailInput = React.createRef();\n    // this.passwordInput = React.createRef();\n\n//   };\n\n  componentDidMount() {\n    const submitButton = document.getElementById(\"submit\") as HTMLButtonElement;\n    if (submitButton) submitButton.disabled = true;\n  }\n\n//   resetValidator() {\n//     Object.keys(this.validator).forEach((fieldName) => {\n//       this.validator[fieldName].errors = [];\n//       this.validator[fieldName].state = '';\n//       this.validator[fieldName].valid = false;\n//     });\n//   }\n\n//   handleInputChange(event, inputPropName) {\n//     const newState = Object.assign({}, this.state);\n//     // newState.inputPropName = event.target.value;\n//     this.setState(newState);\n//     this.updateValidators(inputPropName, event.target.value);\n//   }\n\n//   updateValidators(fieldName, value) {\n//     this.validator[fieldName].errors = [];\n//     this.validator[fieldName].state = value;\n//     this.validator[fieldName].valid = true;\n//     this.validator[fieldName].rules.forEach((rule) => {\n//       if (rule.test instanceof RegExp) {\n//         if (!rule.test.test(value)) {\n//           this.validator[fieldName].errors.push(rule.message);\n//           this.validator[fieldName].valid = false;\n//         }\n//       } else if (typeof rule.test === 'function') {\n//         if (!rule.test(value)) {\n//           this.validator[fieldName].errors.push(rule.message);\n//           this.validator[fieldName].valid = false;\n//         }\n//       }\n//     });\n//     let status = true;\n//     Object.keys(this.validator).forEach((field) => {\n//       if (!this.validator[field].valid) {\n//         status = false;\n//       }\n//     });\n//     document.getElementById('submit').disabled = status ? false : true;\n//   }\n\n//   displayValidationErrors(fieldName) {\n//     const validator = this.validator[fieldName];\n//     const result = '';\n//     if (validator && !validator.valid) {\n//       const errors = validator.errors.map((info, index) => {\n//         return (\n//           <div>\n//             <span className=\"error\" key={index}> {info}</span>\n//             <br />\n//           </div >\n//         );\n//       });\n//       return (\n//         <div>\n//           {errors}\n//         </div>\n//       );\n//     }\n//     return result;\n//   }\n\n  showPassword(e: React.MouseEvent) {\n    e.preventDefault();\n    this.setState((prevState: SignUpFormState) => ({ showPassword: !prevState.showPassword }));\n  }\n\n  addUser = (e: React.MouseEvent) => {\n    // e.preventDefault();\n    // let formData = {\n    //   fname: this.fnameInput.current.value,\n    //   lname: this.lnameInput.current.value,\n    //   email: this.emailInput.current.value,\n    //   password: this.passwordInput.current.value,\n    // }\n    // fetch('/api/insertUser', {\n    //   method: \"POST\",\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify(formData)\n    // })\n    // .then(response => response.json())\n    // .then(data => {\n    //   this.setState({ USERINSERTED: data.USERINSERTED });\n    //   if (this.state.USERINSERTED) {\n    //     document.location.href = \"/\";\n    //   } \n    //   else {\n    //     window.alert(\"ERROR: user already exist\");\n    //   }\n    // });\n    \n  }\n\n  \n\n  render() {\n    // const { handleSubmit } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <form className=\"form\" >\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">First name</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <AccountOutlineIcon />\n            </div>\n            <input\n              id=\"fname\"\n              type=\"text\"\n              ref=\"fname\"\n              name=\"fname\"\n              placeholder=\"First name\"\n            //   ref={this.fnameInput}\n            //   onChange={event => this.handleInputChange(event, 'fname')} \n            />\n          </div>\n          {/* {this.displayValidationErrors('fname')} */}\n        </div>\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">Last name</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <AccountOutlineIcon />\n            </div>\n            <input\n              id=\"lname\"\n              type=\"text\"\n              ref=\"lname\"\n              name=\"lname\"\n              placeholder=\"Last name\"             \n            //   ref={this.lnameInput}\n            //   onChange={event => this.handleInputChange(event, 'lname')}\n            /> \n          </div>\n          {/* {this.displayValidationErrors('lname')} */}\n        </div>\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">E-mail</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <MailRuIcon />\n            </div>\n            <input\n              id=\"email\"\n              type=\"email\"\n              ref=\"email\"\n              name=\"email\"\n              placeholder=\"example@mail.com\"\n            //   ref={this.emailInput}\n            //   onChange={event => this.handleInputChange(event, 'email')}\n            />\n          </div>\n          {/* {this.displayValidationErrors('email')} */}\n        </div>\n        <div className=\"form_form-group form_form-group--forgot\">\n          <span className=\"form_form-group-label\">Password</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <KeyVariantIcon />\n            </div>\n            <input\n              id=\"password\"\n              ref=\"password\"\n              name=\"password\"\n              type={this.state.showPassword ? 'text' : 'password'}\n              placeholder=\"Password\"\n            //   ref={this.passwordInput}\n            //   onChange={event => this.handleInputChange(event, 'password')}\n            />\n            <button\n              type=\"button\"\n              className={`form_form-group-button${showPassword ? ' active' : ''}`}\n              onClick={e => this.showPassword(e)}\n            ><EyeIcon />\n            </button>\n          </div>\n          {/* {this.displayValidationErrors('password')} */}\n        </div>\n        <div className=\"account_btns\">\n          <button id=\"submit\" className=\"btn btn-primary account_btn\" onClick={e => this.addUser(e)}>Sign Up</button>\n        </div>\n      </form>\n    );\n  }\n}","// Libraries\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Components\nimport SignUpForm from './SignUpForm';\n\n// Styles\nimport '../account.scss';\n\nexport default class SignUp extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"account\">\n                <div className=\"account_wrapper\">\n                <div className=\"account_card\">\n                    <SignUpForm  />\n                    <div className=\"account_have-account\">\n                    <span>Already have an account? <Link to=\"/login\">Login</Link></span>\n                    </div>\n                </div>\n                </div>\n            </div>\n        )\n    }\n};\n","import React, { PureComponent } from \"react\";\nimport { Field } from \"redux-form\";\nimport EyeIcon from \"mdi-react/EyeIcon\";\nimport KeyVariantIcon from \"mdi-react/KeyVariantIcon\";\nimport AccountOutlineIcon from \"mdi-react/AccountOutlineIcon\";\nimport { Link, Redirect } from \"react-router-dom\";\n// import { AuthConsumer, AuthContext } from \"../../../App/AuthContext\";\n\ntype SignInFormState = {\n    showPassword: boolean,\n    userlogin: boolean,\n    userLoggedin: string\n}\n\nexport default class SignInForm extends PureComponent<{}, SignInFormState> {\n    state = {\n        showPassword: false,\n        userlogin: false,\n        userLoggedin: \"\"\n    }\n\n\n\t// checkUser(event) {\n\t// \t//fetch the data from loginUser\n\t// \tevent.preventDefault();\n\n\t// \tlet data = {\n\t// \t\temail: this.refs.email.value,\n\t// \t\tpassword: this.refs.password.value\n\t// \t};\n\n\t// \tif (data.email == null || data.password == null) {\n\t// \t\twindow.alert(\"Please log in with your email/password.\");\n\t// \t} else {\n\t// \t\tfetch(\"/api/loginUser\", {\n\t// \t\t\tmethod: \"POST\",\n\t// \t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t// \t\t\tbody: JSON.stringify(data)\n\t// \t\t})\n\t// \t\t\t.then(response => response.json())\n\t// \t\t\t.then(resdata => {\n\t// \t\t\t\tthis.setState({ userlogin: resdata.userLoggedin });\n\n\t// \t\t\t\tif (this.state.userlogin) {\n\t// \t\t\t\t\tlocalStorage.setItem(\"authToken\", resdata.authToken);\n\t// \t\t\t\t\tthis.props.login(data.email, data.password)\n\t// \t\t\t\t\tthis.setState({userLoggedin: data.email});\n\t// \t\t\t\t\t// document.location.href = `/dashboard_default?email=${data.email}`;\n\t\t\t\t\t\t\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\twindow.alert(\"ERROR: WRONG PASSWORD/EMAIL\");\n\t// \t\t\t\t}\n\t// \t\t\t});\n\t// \t}\n\t// }\n\n\tshowPassword(e: React.MouseEvent) {\n\t\te.preventDefault();\n\t\tthis.setState(prevState => ({ showPassword: !prevState.showPassword }));\n\t}\n\n\trender() {\n\t\tconst { showPassword } = this.state;\n\n\t\treturn (\n\t\t\t<form className=\"form\">\n\t\t\t\t<div className=\"form_form-group\">\n\t\t\t\t\t<span className=\"form_form-group-label\">Username</span>\n\t\t\t\t\t<div className=\"form_form-group-field\">\n\t\t\t\t\t\t<div className=\"form_form-group-icon\">\n\t\t\t\t\t\t\t<AccountOutlineIcon />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t\t\t// component=\"input\"\n\t\t\t\t\t\t\tref=\"email\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Name\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"form_form-group\">\n\t\t\t\t\t<span className=\"form_form-group-label\">Password</span>\n\t\t\t\t\t<div className=\"form_form-group-field\">\n\t\t\t\t\t\t<div className=\"form_form-group-icon\">\n\t\t\t\t\t\t\t<KeyVariantIcon />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t// component=\"input\"\n\t\t\t\t\t\t\tref=\"password\"\n\t\t\t\t\t\t\ttype={showPassword ? \"text\" : \"password\"}\n\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclassName={`form_form-group-button${\n\t\t\t\t\t\t\t\tshowPassword ? \" active\" : \"\"\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\tonClick={e => this.showPassword(e)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<EyeIcon />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"account_btns\">\n\t\t\t\t\t<Link\n\t\t\t\t\t\tclassName=\"btn btn-primary account_btn\"\n\t\t\t\t\t\tto={`/dashboard_default/${this.state.userLoggedin}`}\n\t\t\t\t\t\t// onClick={this.checkUser.bind(this)}\n\t\t\t\t\t>\n\t\t\t\t\t\tSign In\n\t\t\t\t\t</Link>\n\t\t\t\t\t<Link className=\"btn btn-outline-primary account_btn\" to=\"/signup\">\n\t\t\t\t\t\tCreate Account\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t);\n\t}\n}\n","// Libraries\nimport React from 'react';\n\n// Components\nimport SignInForm from './SignInForm';\n\nexport default class SignIn extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"account\">\n                <div className=\"account_wrapper\">\n                <div className=\"account_card\">\n                    <SignInForm />\n                </div>\n                </div>\n            </div>\n        )\n    }\n}","// Libraries\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n// Components \nimport SignUp from '../Account/Signup/SignUp';\nimport SignIn from '../Account/SignIn/SignIn';\n\nexport default class AppRouter extends React.PureComponent {\n\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" compoonent={SignIn}/>\n                    <Route exact path=\"/signup\" component={SignUp} />\n                    <Route path=\"/signin\" component={SignIn} />\n                </Switch>\n            </Router>\n        );\n    }\n\n}","// Libraries\nimport React from 'react';\n\n// Styles\nimport './App.scss';\n\n// Components\nimport Router from './Components/Router/Router';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"theme-light\">\n      <div className=\"wrapper blocks-with-shadow-theme top-navigation\">\n        <Router />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}