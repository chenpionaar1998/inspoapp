{"version":3,"sources":["Components/Account/duck/Types.ts","Components/Account/Signup/validator.ts","Components/Account/Signup/SignUpForm.tsx","Components/Account/Signup/ConnectedSignUpForm.ts","Components/Account/duck/Actions.ts","Components/Account/Signup/SignUp.tsx","Components/Account/SignIn/SignInForm.tsx","Components/Account/SignIn/ConnectedSignInForm.ts","Components/Account/SignIn/SignIn.tsx","Components/Router/Router.tsx","App.tsx","Components/Account/duck/Reducer.ts","RootReducer.tsx","serviceWorker.ts","index.tsx"],"names":["SIGN_IN_USER_ACTION","SIGN_UP_USER_ACTION","UPDATE_ACCOUNT_SIGNED_IN_ACTION","validator","email","rules","test","value","length","includes","message","errors","valid","state","password","RegExp","fname","lname","SignUpForm","showPassword","shouldShowCreateError","resetValidator","Object","entries","key","handleInputChange","event","inputPropName","setState","target","updateValidators","fieldName","forEach","rule","push","status","keys","field","displayValidationErrors","submitButton","document","getElementById","disabled","v","map","info","index","className","addUser","e","preventDefault","formData","props","createUser","this","prevState","id","type","name","placeholder","onChange","ref","onClick","React","Component","ConnectedSignUpForm","connect","dispatch","fetch","method","headers","body","JSON","stringify","then","response","json","result","userName","updateAccountWithSignUp","SignUp","to","PureComponent","SignInForm","userlogin","checkUser","signInUser","prevProps","signedIn","history","ConnectedSignInForm","ownProps","Account","user","batch","updateAccountWithSignIn","SignIn","AppRouter","exact","path","createBrowserHistory","App","initialState","action","rootReducer","combineReducers","Boolean","window","location","hostname","match","ReactDOM","render","store","createStore","composeWithDevTools","applyMiddleware","thunk","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18264ad7.chunk.js","sourcesContent":["// Libraries\nimport { Dispatch } from \"redux\";\n\nexport const SIGN_IN_USER_ACTION = \"@@USER/SIGN_IN_USER_ACTION\";\nexport const SIGN_UP_USER_ACTION = \"@@USER/SIGN_UP_USER_ACTION\";\nexport const UPDATE_ACCOUNT_SIGNED_IN_ACTION = \"@@USER/UPDATE_ACCOUNT_SIGNED_IN_ACTION\"\n\nexport interface AccountState {\n    userName: string;\n    fname: string;\n    lname: string;\n    signedIn: boolean;\n} \n\nexport interface ISignInUserAction {\n    type: typeof SIGN_IN_USER_ACTION,\n    userName: string;\n    fname: string;\n    lname: string;\n}\n\nexport interface ISignUpUserAction {\n    type: typeof SIGN_UP_USER_ACTION,\n    userName: string;\n    fname: string;\n    lname: string;\n}\n\nexport interface IUpdateAccountSignedInAction {\n    type: typeof UPDATE_ACCOUNT_SIGNED_IN_ACTION,\n    signedIn: boolean\n}\n\nexport type SignInUserAction = (dispatch: Dispatch) => Promise<ISignInUserAction | void> | void;\n\nexport type SignUpUserAction = (dispatch: Dispatch) => Promise<ISignUpUserAction | void> | void;\n\n// export type UpdateAccountSignedInAction = (dispatch: Dispatch) => Promise<IUpdateAccountSignedInAction> | void;\n\nexport type AccountAction = ISignInUserAction | ISignUpUserAction | IUpdateAccountSignedInAction;","// Taken from https://www.codementor.io/muhammedali956/implementing-dynamic-form-validators-in-reactjs-6j7q0l8e7\nconst validator: validatorType= {\n    email: {\n        rules: [\n            {\n                test: (value: string) => {\n                    return value.length > 0 && value.includes('@');\n                },\n                message: 'Invalid email input'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    },\n    password: {\n        rules: [\n            {\n                test: (value: string) => {\n                    const reg = RegExp(/^(?=.*[a-z])(?=.*[A-Z]).*$/);\n                    return reg.test(value) || value.length >= 8 ;\n                },\n                message: 'Password must contain at least one lowercase letter, one uppercase letter and be at least 8 characters long'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    },\n    fname: {\n        rules: [\n            {\n                test: (value: string) => {\n                    return value.length > 0;\n                },\n                message: 'First name cannot be empty'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    },\n    lname: {\n        rules: [\n            {\n                test: (value: string) => {\n                    return value.length > 0;\n                },\n                message: 'Last name cannot be empty'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    }\n}\n\nexport type validatorType = {\n    [key: string]: validatorObject;\n}\n\nexport type validatorObject = {\n    rules: Array<ruleType>;\n    errors: Array<string>;\n    valid: boolean;\n    state: string;\n}\n\ntype ruleType = {\n    test: (value: string) => boolean;\n    message: string;\n}\n\nexport default validator;","// Libraries\nimport React from 'react';\n\n// Icons\nimport EyeIcon from 'mdi-react/EyeIcon';\nimport KeyVariantIcon from 'mdi-react/KeyVariantIcon';\nimport AccountOutlineIcon from 'mdi-react/AccountOutlineIcon';\nimport MailRuIcon from 'mdi-react/MailRuIcon';\n\n// Components\nimport validator, {validatorType} from './validator';\n\n// Styles\nimport '../../../Scss/form.scss';\n\n// Types \nimport { SignUpUserAction } from '../duck/Types';\n\ntype SignUpFormState = {\n  email: string;\n  password: string;\n  fname: string;\n  lname: string;\n  showPassword: boolean;\n  shouldShowCreateError: boolean;\n}\n\ntype SignUpFormProps = {\n  createUser: (formData: AccountInfoType) => SignUpUserAction;\n}\n\nexport type AccountInfoType = {\n  email: string;\n  password: string;\n  fname: string;\n  lname: string;\n}\n\nexport default class SignUpForm extends React.Component<SignUpFormProps, SignUpFormState> {\n  state = {\n    email: '',\n    password: '',\n    fname: '',\n    lname: '',\n    showPassword: false,\n    shouldShowCreateError: false\n  };\n\n  validator: validatorType = validator;\n\n  componentDidMount() {\n    // Disable submit button\n    const submitButton = document.getElementById(\"submit\") as HTMLButtonElement;\n    if (submitButton) {\n      submitButton.disabled = true;\n    }\n\n    // Initialize validator\n    this.resetValidator();\n  }\n\n  resetValidator = () => {\n    for (let key of Object.entries(validator)) {\n      key[1].errors = [];\n      key[1].state = '';\n      key[1].valid = false;\n    }\n  }\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>, inputPropName: string) => {\n    this.setState<never>( {\n      [inputPropName] : event.target.value\n    });\n\n    this.updateValidators(inputPropName, event.target.value);\n  }\n\n  updateValidators = (fieldName: string, value: string) => {\n    this.validator[fieldName].errors = [];\n    this.validator[fieldName].state = value;\n    this.validator[fieldName].valid = true;\n    this.validator[fieldName].rules.forEach((rule) => {\n        if (!rule.test(value)) {\n          this.validator[fieldName].errors.push(rule.message);\n          this.validator[fieldName].valid = false;\n        }\n      }\n    );\n\n    let status = true;\n    Object.keys(this.validator).forEach((field) => {\n      if (!this.validator[field].valid) {\n        status = false;\n      }\n    });\n\n    this.displayValidationErrors(fieldName);\n\n    const submitButton = document.getElementById('submit') as HTMLButtonElement;\n    if (submitButton) {\n      submitButton.disabled = status ? false : true;\n    }\n  }\n\n  displayValidationErrors = (fieldName: string) => {\n    const v = this.validator[fieldName];\n    const result = '';\n    if (!v.valid) {\n      const errors = v.errors.map((info, index) => {\n        return (\n          <div key={index} className=\"error_div\">\n            <span className=\"error\"> {info}</span>\n            <br />\n          </ div>\n        );\n      });\n      return errors;\n    }\n    return result;\n  }\n\n  showPassword(e: React.MouseEvent) {\n    e.preventDefault();\n    this.setState((prevState: SignUpFormState) => ({ showPassword: !prevState.showPassword }));\n  }\n\n  addUser = (e: React.MouseEvent | React.KeyboardEvent) => {\n    e.preventDefault();\n\n    let formData: AccountInfoType = {\n      fname: this.state.fname,\n      lname: this.state.lname,\n      email: this.state.email,\n      password: this.state.password,\n    }\n\n    this.props.createUser(formData);\n  }\n\n  render() {\n    const { showPassword } = this.state;\n\n    return (\n      <form className=\"form\" >\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">First name</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <AccountOutlineIcon />\n            </div>\n            <input\n              id = \"fname\"\n              type = \"text\"\n              name = \"fname\"\n              placeholder = \"First name\"\n              value = {this.state.fname}\n              onChange={event => this.handleInputChange(event, 'fname')} \n            />\n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('fname')}\n          </div>\n        </div>\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">Last name</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <AccountOutlineIcon />\n            </div>\n            <input\n              id=\"lname\"\n              type=\"text\"\n              name=\"lname\"\n              placeholder=\"Last name\"  \n              value = {this.state.lname}           \n              onChange={event => this.handleInputChange(event, 'lname')}\n            /> \n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('lname')}\n          </div>        \n        </div>\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">E-mail</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <MailRuIcon />\n            </div>\n            <input\n              id=\"email\"\n              type=\"email\"\n              ref=\"email\"\n              name=\"email\"\n              placeholder=\"example@mail.com\"\n              value = {this.state.email}\n              onChange={event => this.handleInputChange(event, 'email')}\n            />\n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('email')}\n          </div>        \n        </div>\n        <div className=\"form_form-group form_form-group--forgot\">\n          <span className=\"form_form-group-label\">Password</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <KeyVariantIcon />\n            </div>\n            <input\n              id=\"password\"\n              ref=\"password\"\n              name=\"password\"\n              type={this.state.showPassword ? 'text' : 'password'}\n              placeholder=\"Password\"\n              value = {this.state.password}\n              onChange={event => this.handleInputChange(event, 'password')}\n            />\n            <button\n              type=\"button\"\n              className={`form_form-group-button${showPassword ? ' active' : ''}`}\n              onClick={e => this.showPassword(e)}\n            ><EyeIcon />\n            </button>\n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('password')}\n          </div>        \n        </div>\n        <div className=\"account_btns\">\n          <button id=\"submit\"  className=\"btn btn-primary account_btn\" onClick={e => this.addUser(e)}>Sign Up</button>\n        </div>\n      </form>\n    );\n  }\n}","// Libraries\nimport { connect } from \"react-redux\";\n\n// Actions\nimport { createUser } from '../duck/Actions';\nimport SignUpForm from \"./SignUpForm\";\n\nconst ConnectedSignUpForm = connect(\n    null,\n    {\n        createUser: createUser\n    }\n)(SignUpForm as any)\n\nexport default ConnectedSignUpForm;","// Libraries\nimport { Dispatch } from \"redux\";\nimport { batch } from \"react-redux\";\n\n// Types\nimport { AccountInfoType } from \"../Signup/SignUpForm\";\nimport { SignInFormType } from \"../SignIn/SignInForm\";\nimport  { ISignUpUserAction,\n        SIGN_UP_USER_ACTION, \n        SIGN_IN_USER_ACTION, \n        UPDATE_ACCOUNT_SIGNED_IN_ACTION,\n        SignUpUserAction, \n        ISignInUserAction, \n        SignInUserAction,\n        IUpdateAccountSignedInAction\n} from './Types';\n\nexport function createUser (formData: AccountInfoType): SignUpUserAction {\n    return (dispatch: Dispatch<ISignUpUserAction>) => {\n        fetch('/api/createUser', {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(formData)\n          })\n          .then(response => response.json())\n          .then(result => {\n            if (result.createUser) {\n                return dispatch(updateAccountWithSignUp(formData));\n            }\n            else {\n                // dispatch error state\n            }\n          });\n    }\n}\n\nexport function signInUser (formData: SignInFormType): SignInUserAction {\n    return (dispatch: Dispatch) => {\n        fetch('/api/signInUser', {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(formData)\n        })\n        .then(response => response.json())\n        .then(result => {\n            if (result.user) {\n                return batch(() => {\n                    dispatch(updateAccountWithSignIn(result.user));\n                    dispatch(updateAccountSignedIn(true));\n                });            }\n            else {\n                // dispatch error state\n            }\n        })\n    }\n}\n\nfunction updateAccountWithSignUp (formData: AccountInfoType): ISignUpUserAction {\n    return {\n        type: SIGN_UP_USER_ACTION,\n        userName: formData.email,\n        fname: formData.fname,\n        lname: formData.lname\n    }\n}\n\nfunction updateAccountWithSignIn (formData: AccountInfoType): ISignInUserAction {\n    return {\n        type: SIGN_IN_USER_ACTION,\n        userName: formData.email,\n        fname: formData.fname,\n        lname: formData.lname\n    }\n}\n\nfunction updateAccountSignedIn (signedIn: boolean): IUpdateAccountSignedInAction {\n    return {\n        type: UPDATE_ACCOUNT_SIGNED_IN_ACTION,\n        signedIn\n    }\n} ","// Libraries\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Components\nimport ConnectedSignUpForm from './ConnectedSignUpForm';\n\n// Styles\nimport '../account.scss';\n\nexport default class SignUp extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"account\">\n                <div className=\"account_wrapper\">\n                <div className=\"account_card\">\n                    <ConnectedSignUpForm  />\n                    <div className=\"account_have-account\">\n                        <span>Already have an account? <Link to=\"/signin\">Login</Link></span>\n                    </div>\n                </div>\n                </div>\n            </div>\n        )\n    }\n};\n","// Libraries\nimport React, { PureComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Icons\nimport EyeIcon from \"mdi-react/EyeIcon\";\nimport KeyVariantIcon from \"mdi-react/KeyVariantIcon\";\nimport AccountOutlineIcon from \"mdi-react/AccountOutlineIcon\";\n\n// Components\n// import { AuthConsumer, AuthContext } from \"../../../App/AuthContext\";\n\n// Types \nimport { SignInUserAction } from '../duck/Types';\n\ntype SignInFormState = {\n\temail: string,\n\tpassword: string,\n    showPassword: boolean,\n    userlogin: boolean,\n}\n\ntype SignInFormProps = {\n\thistory: any;\n\tsignedIn: boolean;\n\tsignInUser:  (formData: SignInFormType) => SignInUserAction;\n}\n\nexport type SignInFormType = {\n\temail: string,\n\tpassword: string\n}\n\nexport default class SignInForm extends PureComponent<SignInFormProps, SignInFormState> {\n    state = {\n\t\temail: \"\",\n \t\tpassword: \"\",\n        showPassword: false,\n        userlogin: false,\n    }\n\n\tcomponentDidUpdate(prevProps: SignInFormProps) {\n\t\tif (this.props.signedIn && this.props.signedIn !== prevProps.signedIn) {\n\t\t\tthis.props.history.push('/dashboard_default');\n\t\t}\n\t}\n\n\tcheckUser = (e: React.MouseEvent) => {\n\t\t//fetch the data from loginUser\n\t\te.preventDefault();\n\n\t\tlet formData: SignInFormType = {\n\t\t\temail: this.state.email,\n\t\t\tpassword: this.state.password\n\t\t};\n\n \t\tthis.props.signInUser(formData);\n\t}\n\n\thandleInputChange = (event: React.ChangeEvent<HTMLInputElement>, inputPropName: string) => {\n\t\tthis.setState<never>( {\n\t\t\t[inputPropName] : event.target.value\n\t\t});\n\t}\n\n\tshowPassword(e: React.MouseEvent) {\n\t\te.preventDefault();\n\t\tthis.setState(prevState => ({ showPassword: !prevState.showPassword }));\n\t}\n\n\trender() {\n\t\tconst { showPassword } = this.state;\n\n\t\treturn (\n\t\t\t<form className=\"form\">\n\t\t\t\t<div className=\"form_form-group\">\n\t\t\t\t\t<span className=\"form_form-group-label\">Username</span>\n\t\t\t\t\t<div className=\"form_form-group-field\">\n\t\t\t\t\t\t<div className=\"form_form-group-icon\">\n\t\t\t\t\t\t\t<AccountOutlineIcon />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Username\"\n \t\t\t\t\t\t\tvalue={this.state.email}\n \t\t\t\t\t\t\tonChange={event => this.handleInputChange(event, \"email\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"form_form-group\">\n\t\t\t\t\t<span className=\"form_form-group-label\">Password</span>\n\t\t\t\t\t<div className=\"form_form-group-field\">\n\t\t\t\t\t\t<div className=\"form_form-group-icon\">\n\t\t\t\t\t\t\t<KeyVariantIcon />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\ttype={showPassword ? \"text\" : \"password\"}\n\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t\tvalue={this.state.password}\n \t\t\t\t\t\t\tonChange={event => this.handleInputChange(event, \"password\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclassName={`form_form-group-button${\n\t\t\t\t\t\t\t\tshowPassword ? \" active\" : \"\"\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\tonClick={e => this.showPassword(e)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<EyeIcon />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"account_btns\">\n\t\t\t\t\t<Link\n\t\t\t\t\t\tclassName=\"btn btn-primary account_btn\"\n\t\t\t\t\t\tto={`/dashboard_default`}\n \t\t\t\t\t\tonClick={this.checkUser}\n\t\t\t\t\t>\n\t\t\t\t\t\tSign In\n\t\t\t\t\t</Link>\n\t\t\t\t\t<Link className=\"btn btn-outline-primary account_btn\" to=\"/signup\">\n\t\t\t\t\t\tCreate Account\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t);\n\t}\n}\n","// Libraries\nimport { connect } from \"react-redux\";\n\n// Actions\nimport { signInUser } from '../duck/Actions';\n\n// Componenets\nimport SignInForm from \"./SignInForm\";\n\n// Types\nimport { AppState } from '../../../RootReducer'\n\ntype ConnectedSignInProps = {\n    history: any;\n}\n\nconst mapStateToProps = (state: AppState, ownProps: ConnectedSignInProps) => ({\n    signedIn: state.Account.signedIn,\n    history: ownProps.history\n});\n\nconst ConnectedSignInForm = connect(\n    mapStateToProps,\n    {\n        signInUser: signInUser\n    }\n)(SignInForm as any)\n\nexport default ConnectedSignInForm; ","// Libraries\nimport React from 'react';\n\n// Components\nimport ConnectedSignInForm from './ConnectedSignInForm';\n\ntype SigninProps = {\n    history: any;\n}\n\nexport default class SignIn extends React.PureComponent<SigninProps> {\n    render() {\n        return (\n            <div className=\"account\">\n                <div className=\"account_wrapper\">\n                    <div className=\"account_card\">\n                        <ConnectedSignInForm history={this.props.history}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","// Libraries\nimport React from \"react\";\nimport { Router, Route, Switch } from \"react-router-dom\";\n\n// Components \nimport SignUp from '../Account/Signup/SignUp';\nimport SignIn from '../Account/SignIn/SignIn';\n\ntype RouterProp = {\n    history: any;\n}\n\nexport default class AppRouter extends React.PureComponent<RouterProp> {\n    render() {\n        return (\n            <Router history={this.props.history}>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <SignIn history={this.props.history}/>\n                    </Route>\n                    <Route exact path=\"/signup\">\n                        <SignUp/>\n                    </Route>\n                    <Route path=\"/signin\">\n                        <SignIn history={this.props.history}/>\n                    </Route>\n                </Switch>\n            </Router>\n        );\n    }\n\n}","// Libraries\nimport React from 'react';\nimport { createBrowserHistory } from 'history';\n\n// Styles\nimport './App.scss';\n\n// Components\nimport Router from './Components/Router/Router';\n\nconst history = createBrowserHistory();\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"theme-light\">\n      <div className=\"wrapper blocks-with-shadow-theme top-navigation\">\n        <Router history={history}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// Types\nimport { AccountState,\n        AccountAction, \n        SIGN_UP_USER_ACTION, \n        SIGN_IN_USER_ACTION, \n        UPDATE_ACCOUNT_SIGNED_IN_ACTION\n} from './Types';\n\nconst initialState: AccountState  = {\n    userName: '',\n    fname: '',\n    lname: '',\n    signedIn: false\n}\n\nconst  Account = ( state: AccountState = initialState, action: AccountAction): AccountState => {\n    switch (action.type){\n        case SIGN_IN_USER_ACTION:\n        case SIGN_UP_USER_ACTION:\n            return {\n                userName: action.userName,\n                fname: action.fname,\n                lname: action.lname,\n                signedIn: state.signedIn\n            }\n        case UPDATE_ACCOUNT_SIGNED_IN_ACTION:\n            return {\n                userName: state.userName,\n                fname: state.fname,\n                lname: state.lname,\n                signedIn: action.signedIn\n            }\n        default: \n        return state;\n    }\n}\n\nexport default Account;","// Libraries\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\n// Types\nimport { AccountState } from '../src/Components/Account/duck/Types';\n\n// Reducers\nimport Account from './Components/Account/duck/Reducer';\n\nconst rootReducer = combineReducers({\n    Account\n});\n\nexport type AppState = {\n    Account: AccountState\n}\n\nexport default function configureStore() {\n    return createStore (\n        rootReducer,\n        composeWithDevTools(\n            applyMiddleware(thunk)\n        )\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Libraries\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\n// Components\nimport App from './App';\nimport configureStore from './RootReducer';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}