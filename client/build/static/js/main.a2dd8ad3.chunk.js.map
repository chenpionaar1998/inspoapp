{"version":3,"sources":["Components/Account/Signup/validator.ts","Components/Account/Signup/utils.ts","Components/Account/Signup/SignUpForm.tsx","Components/Account/Signup/SignUp.tsx","Components/Account/SignIn/SignInForm.tsx","Components/Account/SignIn/SignIn.tsx","Components/Router/Router.tsx","App.tsx","Components/Account/duck/Reducer.tsx","RootReducer.tsx","serviceWorker.ts","index.tsx"],"names":["validator","email","rules","test","value","length","message","errors","valid","state","password","RegExp","fname","lname","createUser","formData","console","log","hashSync","fetch","method","headers","body","JSON","stringify","then","response","json","data","SignUpForm","showPassword","USERINSERTED","resetValidator","Object","entries","key","handleInputChange","event","inputPropName","setState","target","updateValidators","fieldName","forEach","rule","push","status","keys","field","displayValidationErrors","submitButton","document","getElementById","disabled","v","map","info","index","className","addUser","e","preventDefault","this","prevState","id","type","name","placeholder","onChange","ref","onClick","React","Component","SignUp","to","PureComponent","SignInForm","userlogin","userLoggedin","SignIn","AppRouter","exact","path","App","initialState","userName","userID","rootReducer","combineReducers","AccountReducer","Boolean","window","location","hostname","match","ReactDOM","render","store","createStore","composeWithDevTools","applyMiddleware","thunk","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2dd8ad3.chunk.js","sourcesContent":["// Taken from https://www.codementor.io/muhammedali956/implementing-dynamic-form-validators-in-reactjs-6j7q0l8e7\nconst validator: validatorType= {\n    email: {\n        rules: [\n            {\n                test: (value: string) => {\n                    return value.length > 0;\n                },\n                message: 'Email cannot be empty'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    },\n    password: {\n        rules: [\n            {\n                test: (value: string) => {\n                    const reg = RegExp(/^(?=.*[a-z])(?=.*[A-Z]).*$/);\n                    return reg.test(value) || value.length >= 8 ;\n                },\n                message: 'Password must contain at least one lowercase letter, one uppercase letter and be at least 8 characters long'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    },\n    fname: {\n        rules: [\n            {\n                test: (value: string) => {\n                    return value.length > 0;\n                },\n                message: 'First name cannot be empty'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    },\n    lname: {\n        rules: [\n            {\n                test: (value: string) => {\n                    return value.length > 0;\n                },\n                message: 'Last name cannot be empty'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    }\n}\n\nexport type validatorType = {\n    [key: string]: validatorObject;\n}\n\nexport type validatorObject = {\n    rules: Array<ruleType>;\n    errors: Array<string>;\n    valid: boolean;\n    state: string;\n}\n\ntype ruleType = {\n    test: (value: string) => boolean;\n    message: string;\n}\n\nexport default validator;","// Libraries\nimport { hashSync } from 'bcryptjs';\n\n// Types\nimport { SignUpFormType } from './SignUpForm';\n\n// DB actions\n// import { createUser as createUserInDB } from '../../../../../server/Database/api/createUser';\n\nexport function createUser (formData: SignUpFormType): void {\n    console.log(formData);\n    formData.password = hashPassWord(formData.password);\n    console.log(formData.password);\n\n    fetch('/api/insertUser', {\n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData)\n      })\n      .then(response => response.json())\n      .then(data => {\n        // this.setState({ USERINSERTED: data.USERINSERTED });\n        // if (this.state.USERINSERTED) {\n        //   document.location.href = \"/\";\n        // } \n        // else {\n        //   window.alert(\"ERROR: user already exist\");\n        // }\n      });\n}\n\nfunction hashPassWord (password: string): string {\n    return hashSync(password, 10);\n}","// Libraries\nimport React from 'react';\n\n// Icons\nimport EyeIcon from 'mdi-react/EyeIcon';\nimport KeyVariantIcon from 'mdi-react/KeyVariantIcon';\nimport AccountOutlineIcon from 'mdi-react/AccountOutlineIcon';\nimport MailRuIcon from 'mdi-react/MailRuIcon';\n\n// Components\nimport validator, {validatorType} from './validator';\n\n// Styles\nimport '../../../Scss/form.scss';\n\n// Utils\nimport { createUser } from './utils';\n\ntype SignUpFormState = {\n  email: string;\n  password: string;\n  fname: string;\n  lname: string;\n  showPassword: boolean;\n  USERINSERTED: boolean;\n}\n\nexport type SignUpFormType = {\n  email: string;\n  password: string;\n  fname: string;\n  lname: string;\n}\n\nexport default class SignUpForm extends React.Component<{}, SignUpFormState> {\n  state = {\n    email: '',\n    password: '',\n    fname: '',\n    lname: '',\n    showPassword: false,\n    USERINSERTED: false\n  };\n\n  validator: validatorType = validator;\n\n  componentDidMount() {\n    // Disable submit button\n    const submitButton = document.getElementById(\"submit\") as HTMLButtonElement;\n    if (submitButton) {\n      submitButton.disabled = true;\n    }\n\n    // Initialize validator\n    this.resetValidator();\n  }\n\n  resetValidator = () => {\n    for (let key of Object.entries(validator)) {\n      key[1].errors = [];\n      key[1].state = '';\n      key[1].valid = false;\n    }\n  }\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>, inputPropName: string) => {\n    this.setState<never>( {\n      [inputPropName] : event.target.value\n    });\n\n    this.updateValidators(inputPropName, event.target.value);\n  }\n\n  updateValidators = (fieldName: string, value: string) => {\n    this.validator[fieldName].errors = [];\n    this.validator[fieldName].state = value;\n    this.validator[fieldName].valid = true;\n    this.validator[fieldName].rules.forEach((rule) => {\n        if (!rule.test(value)) {\n          this.validator[fieldName].errors.push(rule.message);\n          this.validator[fieldName].valid = false;\n        }\n      }\n    );\n\n    let status = true;\n    Object.keys(this.validator).forEach((field) => {\n      if (!this.validator[field].valid) {\n        status = false;\n      }\n    });\n\n    this.displayValidationErrors(fieldName);\n\n    const submitButton = document.getElementById('submit') as HTMLButtonElement;\n    if (submitButton) {\n      submitButton.disabled = status ? false : true;\n    }\n  }\n\n  displayValidationErrors = (fieldName: string) => {\n    const v = this.validator[fieldName];\n    const result = '';\n    if (!v.valid) {\n      const errors = v.errors.map((info, index) => {\n        return (\n          <div key={index} className=\"error_div\">\n            <span className=\"error\"> {info}</span>\n            <br />\n          </ div>\n        );\n      });\n      return errors;\n    }\n    return result;\n  }\n\n  showPassword(e: React.MouseEvent) {\n    e.preventDefault();\n    this.setState((prevState: SignUpFormState) => ({ showPassword: !prevState.showPassword }));\n  }\n\n  addUser = (e: React.MouseEvent | React.KeyboardEvent) => {\n    e.preventDefault();\n\n    let formData: SignUpFormType = {\n      fname: this.state.fname,\n      lname: this.state.lname,\n      email: this.state.email,\n      password: this.state.password,\n    }\n\n    createUser(formData);\n  }\n\n  render() {\n    const { showPassword } = this.state;\n\n    return (\n      <form className=\"form\" >\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">First name</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <AccountOutlineIcon />\n            </div>\n            <input\n              id = \"fname\"\n              type = \"text\"\n              name = \"fname\"\n              placeholder = \"First name\"\n              value = {this.state.fname}\n              onChange={event => this.handleInputChange(event, 'fname')} \n            />\n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('fname')}\n          </div>\n        </div>\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">Last name</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <AccountOutlineIcon />\n            </div>\n            <input\n              id=\"lname\"\n              type=\"text\"\n              name=\"lname\"\n              placeholder=\"Last name\"  \n              value = {this.state.lname}           \n              onChange={event => this.handleInputChange(event, 'lname')}\n            /> \n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('lname')}\n          </div>        \n        </div>\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">E-mail</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <MailRuIcon />\n            </div>\n            <input\n              id=\"email\"\n              type=\"email\"\n              ref=\"email\"\n              name=\"email\"\n              placeholder=\"example@mail.com\"\n              value = {this.state.email}\n              onChange={event => this.handleInputChange(event, 'email')}\n            />\n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('email')}\n          </div>        \n        </div>\n        <div className=\"form_form-group form_form-group--forgot\">\n          <span className=\"form_form-group-label\">Password</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <KeyVariantIcon />\n            </div>\n            <input\n              id=\"password\"\n              ref=\"password\"\n              name=\"password\"\n              type={this.state.showPassword ? 'text' : 'password'}\n              placeholder=\"Password\"\n              value = {this.state.password}\n              onChange={event => this.handleInputChange(event, 'password')}\n            />\n            <button\n              type=\"button\"\n              className={`form_form-group-button${showPassword ? ' active' : ''}`}\n              onClick={e => this.showPassword(e)}\n            ><EyeIcon />\n            </button>\n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('password')}\n          </div>        \n        </div>\n        <div className=\"account_btns\">\n          <button id=\"submit\"  className=\"btn btn-primary account_btn\" onClick={e => this.addUser(e)}>Sign Up</button>\n        </div>\n      </form>\n    );\n  }\n}","// Libraries\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Components\nimport SignUpForm from './SignUpForm';\n\n// Styles\nimport '../account.scss';\n\nexport default class SignUp extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"account\">\n                <div className=\"account_wrapper\">\n                <div className=\"account_card\">\n                    <SignUpForm  />\n                    <div className=\"account_have-account\">\n                        <span>Already have an account? <Link to=\"/signin\">Login</Link></span>\n                    </div>\n                </div>\n                </div>\n            </div>\n        )\n    }\n};\n","// Libraries\nimport React, { PureComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Icons\nimport EyeIcon from \"mdi-react/EyeIcon\";\nimport KeyVariantIcon from \"mdi-react/KeyVariantIcon\";\nimport AccountOutlineIcon from \"mdi-react/AccountOutlineIcon\";\n\n// Components\n// import { AuthConsumer, AuthContext } from \"../../../App/AuthContext\";\n\ntype SignInFormState = {\n    showPassword: boolean,\n    userlogin: boolean,\n    userLoggedin: string\n}\n\nexport default class SignInForm extends PureComponent<{}, SignInFormState> {\n    state = {\n        showPassword: false,\n        userlogin: false,\n        userLoggedin: \"\"\n    }\n\n\n\t// checkUser(event) {\n\t// \t//fetch the data from loginUser\n\t// \tevent.preventDefault();\n\n\t// \tlet data = {\n\t// \t\temail: this.refs.email.value,\n\t// \t\tpassword: this.refs.password.value\n\t// \t};\n\n\t// \tif (data.email == null || data.password == null) {\n\t// \t\twindow.alert(\"Please log in with your email/password.\");\n\t// \t} else {\n\t// \t\tfetch(\"/api/loginUser\", {\n\t// \t\t\tmethod: \"POST\",\n\t// \t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t// \t\t\tbody: JSON.stringify(data)\n\t// \t\t})\n\t// \t\t\t.then(response => response.json())\n\t// \t\t\t.then(resdata => {\n\t// \t\t\t\tthis.setState({ userlogin: resdata.userLoggedin });\n\n\t// \t\t\t\tif (this.state.userlogin) {\n\t// \t\t\t\t\tlocalStorage.setItem(\"authToken\", resdata.authToken);\n\t// \t\t\t\t\tthis.props.login(data.email, data.password)\n\t// \t\t\t\t\tthis.setState({userLoggedin: data.email});\n\t// \t\t\t\t\t// document.location.href = `/dashboard_default?email=${data.email}`;\n\t\t\t\t\t\t\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\twindow.alert(\"ERROR: WRONG PASSWORD/EMAIL\");\n\t// \t\t\t\t}\n\t// \t\t\t});\n\t// \t}\n\t// }\n\n\tshowPassword(e: React.MouseEvent) {\n\t\te.preventDefault();\n\t\tthis.setState(prevState => ({ showPassword: !prevState.showPassword }));\n\t}\n\n\trender() {\n\t\tconst { showPassword } = this.state;\n\n\t\treturn (\n\t\t\t<form className=\"form\">\n\t\t\t\t<div className=\"form_form-group\">\n\t\t\t\t\t<span className=\"form_form-group-label\">Username</span>\n\t\t\t\t\t<div className=\"form_form-group-field\">\n\t\t\t\t\t\t<div className=\"form_form-group-icon\">\n\t\t\t\t\t\t\t<AccountOutlineIcon />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t\t\tref=\"email\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Name\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"form_form-group\">\n\t\t\t\t\t<span className=\"form_form-group-label\">Password</span>\n\t\t\t\t\t<div className=\"form_form-group-field\">\n\t\t\t\t\t\t<div className=\"form_form-group-icon\">\n\t\t\t\t\t\t\t<KeyVariantIcon />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\tref=\"password\"\n\t\t\t\t\t\t\ttype={showPassword ? \"text\" : \"password\"}\n\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclassName={`form_form-group-button${\n\t\t\t\t\t\t\t\tshowPassword ? \" active\" : \"\"\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\tonClick={e => this.showPassword(e)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<EyeIcon />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"account_btns\">\n\t\t\t\t\t<Link\n\t\t\t\t\t\tclassName=\"btn btn-primary account_btn\"\n\t\t\t\t\t\tto={`/dashboard_default/${this.state.userLoggedin}`}\n\t\t\t\t\t\t// onClick={this.checkUser.bind(this)}\n\t\t\t\t\t>\n\t\t\t\t\t\tSign In\n\t\t\t\t\t</Link>\n\t\t\t\t\t<Link className=\"btn btn-outline-primary account_btn\" to=\"/signup\">\n\t\t\t\t\t\tCreate Account\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t);\n\t}\n}\n","// Libraries\nimport React from 'react';\n\n// Components\nimport SignInForm from './SignInForm';\n\nexport default class SignIn extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"account\">\n                <div className=\"account_wrapper\">\n                    <div className=\"account_card\">\n                        <SignInForm />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","// Libraries\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n// Components \nimport SignUp from '../Account/Signup/SignUp';\nimport SignIn from '../Account/SignIn/SignIn';\n\nexport default class AppRouter extends React.PureComponent {\n\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <SignIn/>\n                    </Route>\n                    <Route exact path=\"/signup\">\n                        <SignUp/>\n                    </Route>\n                    <Route path=\"/signin\">\n                        <SignIn/>\n                    </Route>\n                </Switch>\n            </Router>\n        );\n    }\n\n}","// Libraries\nimport React from 'react';\n\n// Styles\nimport './App.scss';\n\n// Components\nimport Router from './Components/Router/Router';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"theme-light\">\n      <div className=\"wrapper blocks-with-shadow-theme top-navigation\">\n        <Router />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// Types\nimport {AccountState, AccountAction} from './Types';\n\nconst initialState: AccountState  = {\n    userName: '',\n    userID: '',\n    fname: '',\n    lname: ''\n}\n\nexport function AccountReducer(\n    state: AccountState = initialState,\n    action: AccountAction): AccountState {\n    switch (action.type){\n        // TODO: ADD MORE STATE\n        default: \n        return state;\n    }\n}","// Libraries\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\n// Reducers\nimport {AccountReducer} from './Components/Account/duck/Reducer';\n\nconst rootReducer = combineReducers({\n    AccountReducer\n});\n\nexport default function configureStore() {\n    return createStore (\n        rootReducer,\n        composeWithDevTools(\n            applyMiddleware(thunk)\n        )\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Libraries\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\n// Components\nimport App from './App';\nimport configureStore from './RootReducer';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}