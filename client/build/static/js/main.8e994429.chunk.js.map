{"version":3,"sources":["Components/Account/duck/Types.ts","Components/Account/duck/Actions.ts","Components/Account/Signup/validator.ts","Components/Account/Signup/SignUpForm.tsx","Components/Account/Signup/ConnectedSignUpForm.ts","Components/Account/Signup/SignUp.tsx","Components/Account/SignIn/SignInForm.tsx","Components/Account/SignIn/ConnectedSignInForm.ts","Components/Account/SignIn/SignIn.tsx","Components/Dashboard/duck/Types.ts","Components/Dashboard/duck/util.ts","Components/Dashboard/duck/Actions.ts","Components/UIKit/PlanModal/util.ts","utils/time.ts","utils/utils.ts","Components/UIKit/PlanModal/PlanModal.tsx","Components/UIKit/BoardItems/BoardItem.tsx","Components/UIKit/BoardItems/BoardItems.tsx","Components/UIKit/LoadingState/BoardsLoadingIndicator.tsx","Components/Dashboard/Dashboard.tsx","Components/Dashboard/ConnectedDashboard.tsx","Components/Router/PrivateRoute.tsx","Components/Router/ConnectedPrivateRoute.ts","Components/TopNavigationBar/TopBarMenuLink.tsx","utils/strings.ts","Components/TopNavigationBar/TopBarProfile.tsx","Components/TopNavigationBar/TopNavigationBar.tsx","Components/TopNavigationBar/ConnectedTopNavigationBar.ts","Components/PlanPage/duck/Types.ts","utils/url.ts","Components/UIKit/PlanPageCards/PlanInfoCard.tsx","Components/Calendar/Calendar.tsx","Components/Calendar/CalanderContainer.tsx","Components/PlanPageFeatureTabs/FeatureContainer.tsx","Components/PlanPage/PlanPage.tsx","Components/PlanPage/ConnectedPlanPage.tsx","Components/PlanPage/duck/Actions.ts","Components/Router/Router.tsx","Components/Router/ConnectedRouter.ts","App.tsx","Components/Account/duck/Reducer.ts","Components/Dashboard/duck/Reducer.ts","Components/PlanPage/duck/Reducer.ts","RootReducer.tsx","serviceWorker.ts","index.tsx"],"names":["UPDATE_USER_INFO_ACTION","UPDATE_ACCOUNT_SIGNED_IN_ACTION","updateAccount","formData","type","userName","email","fname","lname","updateAccountSignedIn","signedIn","validator","rules","test","value","length","includes","message","errors","valid","state","password","RegExp","SignUpForm","showPassword","shouldShowCreateError","resetValidator","Object","entries","key","handleInputChange","event","inputPropName","setState","target","updateValidators","fieldName","forEach","rule","push","displayValidationErrors","v","map","info","index","className","addUser","e","preventDefault","hasEmptyFields","hasValidatorError","props","signUp","field","this","prevProps","history","prevState","Input","id","name","placeholder","onChange","ref","onClick","to","React","Component","ConnectedSignUpForm","connect","ownProps","Account","dispatch","fetch","method","headers","body","JSON","stringify","then","response","json","result","correctUser","localStorage","setItem","batch","user","window","alert","SignUp","PureComponent","SignInForm","checkUser","signIn","ConnectedSignInForm","SignIn","INSERT_PLAN_ACTION","FETCH_PLAN_ACTION","EDIT_PLAN_ACTION","DELETE_PLAN_ACTION","UPDATE_FETCH_STATE_ACTION","sortTravelPlans","plans","sort","planA","planB","time1","moment","timeCreated","time2","isBefore","linkUserToPlan","success","isCreatePlan","buttonText","trimTimeString","str","substring","getCurrentTime","format","PlanModal","planID","isOpen","hasDateError","title","start","end","toggleModal","item","uuid","v4","Date","getTime","hasEmptyField","createPlan","stopPropagation","linkData","username","onLinkUser","editPlan","Button","outline","size","color","btn","buttonName","Modal","toggle","style","display","ButtonToolbar","disabled","BoardItem","deletePlan","userLink","BoardItems","items","i","BoardsLoadingIndicator","Dashboard","showLoadingState","setTimeout","fetchPlansFromDB","Container","Row","Col","md","lg","loaded","ConnectedDashboard","Plans","plan","insertPlan","console","log","res","modifyPlan","planIDs","PrivateRoute","path","render","component","ConnectedPrivateRoute","TopBarMenuLink","icon","capitalize","charAt","toUpperCase","TopBarProfile","collapsed","backgroundColor","Collapse","signOut","TopNavigationBar","ConnectedTopNavigationBar","clear","emptyForm","UPDATE_CURRENT_PLAN_ACTION","CLEAR_CURRENT_PLAN_ACTION","PlanInfoCard","xl","Card","CardBody","planTitle","planStartDate","parseInt","slice","Calendar","timeZone","defaultView","allDaySlot","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","droppable","contentHeight","themeSystem","header","left","center","right","handleWindowResize","editable","selectable","selectMirror","eventDurationEditable","CalendarContainer","PlanPageFeatureContainer","PlanPage","location","pathname","getCurrentPlanInfo","clearPlanPage","currentPlanID","currentPlanTitle","currentPlanStartDate","FeatureContainer","ConnectedPlanPage","wrappedRoutes","exact","AppRouter","ConnectedRouter","Router","createBrowserHistory","App","initialState","action","plansArr","concat","rootReducer","combineReducers","Boolean","hostname","match","ReactDOM","store","createStore","composeWithDevTools","applyMiddleware","thunk","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8e994429.chunk.js","sourcesContent":["// Libraries\nimport { Dispatch } from \"redux\";\n\nexport const UPDATE_USER_INFO_ACTION = \"@@USER/UPDATE_USER_INFO_ACTION\";\nexport const UPDATE_ACCOUNT_SIGNED_IN_ACTION = \"@@USER/UPDATE_ACCOUNT_SIGNED_IN_ACTION\"\n\nexport interface AccountState {\n    userName: string;\n    fname: string;\n    lname: string;\n    signedIn: boolean;\n} \n\nexport interface IUpdateUserInfoAction {\n    type: typeof UPDATE_USER_INFO_ACTION,\n    userName: string;\n    fname: string;\n    lname: string;\n}\n\nexport interface IUpdateAccountSignedInAction {\n    type: typeof UPDATE_ACCOUNT_SIGNED_IN_ACTION,\n    signedIn: boolean,\n}\n\nexport type UpdateUserInfoAction = (dispatch: Dispatch) => Promise<IUpdateUserInfoAction | void> | void;\n\nexport type AccountAction = IUpdateUserInfoAction | IUpdateAccountSignedInAction;","// Libraries\nimport { Dispatch } from \"redux\";\nimport { batch } from \"react-redux\";\n\n// Types\nimport { AccountInfoType } from \"../Signup/SignUpForm\";\nimport { SignInFormType } from \"../SignIn/SignInForm\";\nimport {UPDATE_USER_INFO_ACTION, \n        UPDATE_ACCOUNT_SIGNED_IN_ACTION,\n        IUpdateUserInfoAction,\n        IUpdateAccountSignedInAction,\n        UpdateUserInfoAction\n} from './Types';\n\nexport function signUp (formData: AccountInfoType): UpdateUserInfoAction {\n    return (dispatch: Dispatch) => {\n        fetch('/api/signUp', {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(formData)\n          })\n          .then(response => response.json())\n          .then(result => {\n            if (result.correctUser) {\n                localStorage.setItem(\"signedIn\", JSON.stringify(true));\n                localStorage.setItem(\"username\", formData.email);\n                localStorage.setItem(\"fname\", formData.fname);\n                localStorage.setItem(\"lname\", formData.lname);\n\n                return batch(() => {\n                    dispatch(updateAccount(result.user));\n                    dispatch(updateAccountSignedIn(true));\n                });                 \n            }\n            else {\n                localStorage.setItem(\"signedIn\", JSON.stringify(false));\n                dispatch(updateAccountSignedIn(false));\n                window.alert(\"The username is already taken\");\n            }\n          });\n    }\n}\n\nexport function signIn (formData: SignInFormType): UpdateUserInfoAction {\n    return (dispatch: Dispatch) => {\n        fetch('/api/signIn', {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(formData)\n        })\n        .then(response => response.json())\n        .then(result => {\n            if (result.correctUser) {\n                localStorage.setItem(\"signedIn\", JSON.stringify(true));\n                localStorage.setItem(\"username\", result.user.email);\n                localStorage.setItem(\"fname\", result.user.fname);\n                localStorage.setItem(\"lname\", result.user.lname);\n                return batch(() => {\n                    dispatch(updateAccount(result.user));\n                    dispatch(updateAccountSignedIn(true));\n                });\n            }\n            else {\n                localStorage.setItem(\"signedIn\", JSON.stringify(false));\n                dispatch(updateAccountSignedIn(false));\n\t\t\t\twindow.alert(\"The username or password you entered is incorrect\");\n            }\n        })\n    }\n}\n\nexport function signOut(): UpdateUserInfoAction {\n    localStorage.clear();\n\n    const emptyForm: AccountInfoType = {\n        email: \"\",\n        password: \"\",\n        fname:\"\",\n        lname: \"\"\n    }\n\n    return (dispatch: Dispatch) => {\n        return batch(() => {\n            dispatch(updateAccount(emptyForm));\n            dispatch(updateAccountSignedIn(false));\n        })\n    }\n}\n\nfunction updateAccount (formData: AccountInfoType): IUpdateUserInfoAction {\n    return {\n        type: UPDATE_USER_INFO_ACTION,\n        userName: formData.email,\n        fname: formData.fname,\n        lname: formData.lname\n    }\n}\n\nfunction updateAccountSignedIn (signedIn: boolean): IUpdateAccountSignedInAction {\n    return {\n        type: UPDATE_ACCOUNT_SIGNED_IN_ACTION,\n        signedIn\n    }\n} ","// Taken from https://www.codementor.io/muhammedali956/implementing-dynamic-form-validators-in-reactjs-6j7q0l8e7\nconst validator: validatorType= {\n    email: {\n        rules: [\n            {\n                test: (value: string) => {\n                    return value.length > 0 && value.includes('@');\n                },\n                message: 'Invalid email input. Example: example@email.com'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    },\n    password: {\n        rules: [\n            {\n                test: (value: string) => {\n                    const reg = RegExp(/^(?=.*[a-z])(?=.*[A-Z]).*$/);\n                    return reg.test(value) || value.length >= 8 ;\n                },\n                message: 'Password must contain at least one lowercase letter, one uppercase letter and be at least 8 characters long'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    },\n    fname: {\n        rules: [\n            {\n                test: (value: string) => {\n                    return value.length > 0;\n                },\n                message: 'First name cannot be empty'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    },\n    lname: {\n        rules: [\n            {\n                test: (value: string) => {\n                    return value.length > 0;\n                },\n                message: 'Last name cannot be empty'\n            }\n        ],\n        errors: [],\n        valid: false,\n        state: '', \n    }\n}\n\nexport type validatorType = {\n    [key: string]: validatorObject;\n}\n\nexport type validatorObject = {\n    rules: Array<ruleType>;\n    errors: Array<string>;\n    valid: boolean;\n    state: string;\n}\n\ntype ruleType = {\n    test: (value: string) => boolean;\n    message: string;\n}\n\nexport default validator;","// Libraries\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Input } from 'reactstrap';\n\n// Icons\nimport EyeIcon from 'mdi-react/EyeIcon';\nimport KeyVariantIcon from 'mdi-react/KeyVariantIcon';\nimport AccountOutlineIcon from 'mdi-react/AccountOutlineIcon';\nimport MailRuIcon from 'mdi-react/MailRuIcon';\n\n// Components\nimport validator, {validatorType} from './validator';\n\n// Styles\nimport '../../../Scss/form.scss';\n\n// Types \nimport { UpdateUserInfoAction } from '../duck/Types';\n\ntype SignUpFormState = {\n  email: string;\n  password: string;\n  fname: string;\n  lname: string;\n  showPassword: boolean;\n  shouldShowCreateError: boolean;\n}\n\ntype SignUpFormProps = {\n  signedIn: boolean;\n  history: any;\n  signUp: (formData: AccountInfoType) => UpdateUserInfoAction;\n}\n\nexport type AccountInfoType = {\n  email: string;\n  password: string;\n  fname: string;\n  lname: string;\n}\n\nexport default class SignUpForm extends React.Component<SignUpFormProps, SignUpFormState> {\n  state = {\n    email: '',\n    password: '',\n    fname: '',\n    lname: '',\n    showPassword: false,\n    shouldShowCreateError: false\n  };\n\n  validator: validatorType = validator;\n\n  componentDidMount() {\n    // Initialize validator\n    this.resetValidator();\n  }\n\n  componentDidUpdate(prevProps: SignUpFormProps) {\n\t\tif (this.props.signedIn && this.props.signedIn !== prevProps.signedIn) {\n\t\t\tthis.props.history.push('/dashboard');\n\t\t}\n\t}\n\n  resetValidator = () => {\n    for (let key of Object.entries(validator)) {\n      key[1].errors = [];\n      key[1].state = '';\n      key[1].valid = false;\n    }\n  }\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>, inputPropName: string) => {\n    this.setState<never>( {\n      [inputPropName] : event.target.value\n    });\n\n    this.updateValidators(inputPropName, event.target.value);\n  }\n\n  updateValidators = (fieldName: string, value: string) => {\n    this.validator[fieldName].errors = [];\n    this.validator[fieldName].state = value;\n    this.validator[fieldName].valid = true;\n    this.validator[fieldName].rules.forEach((rule) => {\n        if (!rule.test(value)) {\n          this.validator[fieldName].errors.push(rule.message);\n          this.validator[fieldName].valid = false;\n        }\n      }\n    );\n\n    this.displayValidationErrors(fieldName);\n  }\n\n  displayValidationErrors = (fieldName: string) => {\n    const v = this.validator[fieldName];\n    const result = '';\n    if (!v.valid) {\n      const errors = v.errors.map((info, index) => {\n        return (\n          <div key={index} className=\"error_div\">\n            <span className=\"error\"> {info}</span>\n            <br />\n          </div>\n        );\n      });\n      return errors;\n    }\n    return result;\n  }\n\n  showPassword(e: React.MouseEvent): void {\n    e.preventDefault();\n    this.setState((prevState: SignUpFormState) => ({ showPassword: !prevState.showPassword }));\n  }\n\n  addUser = (e: React.MouseEvent): void => {\n    e.preventDefault();\n\n    let formData: AccountInfoType = {\n      fname: this.state.fname,\n      lname: this.state.lname,\n      email: this.state.email,\n      password: this.state.password,\n    }\n\n    if (!this.hasEmptyFields() && !this.hasValidatorError()){\n      this.props.signUp(formData);\n    }\n  }\n\n  hasValidatorError = (): boolean => {\n    for (const field in this.validator) {\n      if (this.validator[field].errors) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  hasEmptyFields = (): boolean => {\n    return this.state.email === \"\" || this.state.fname === \"\" || this.state.lname === \"\" || this.state.password === \"\";\n  }\n\n  render() {\n    const { showPassword } = this.state;\n\n    return (\n      <form className=\"form\" >\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">First name</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <AccountOutlineIcon />\n            </div>\n            <Input\n              id = \"fname\"\n              type = \"text\"\n              name = \"fname\"\n              placeholder = \"First name\"\n              value = {this.state.fname}\n              onChange={event => this.handleInputChange(event, 'fname')} \n            />\n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('fname')}\n          </div>\n        </div>\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">Last name</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <AccountOutlineIcon />\n            </div>\n            <Input\n              id=\"lname\"\n              type=\"text\"\n              name=\"lname\"\n              placeholder=\"Last name\"  \n              value = {this.state.lname}           \n              onChange={event => this.handleInputChange(event, 'lname')}\n            /> \n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('lname')}\n          </div>        \n        </div>\n        <div className=\"form_form-group\">\n          <span className=\"form_form-group-label\">E-mail</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <MailRuIcon />\n            </div>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              ref=\"email\"\n              name=\"email\"\n              placeholder=\"example@mail.com\"\n              value = {this.state.email}\n              onChange={event => this.handleInputChange(event, 'email')}\n            />\n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('email')}\n          </div>        \n        </div>\n        <div className=\"form_form-group form_form-group--forgot\">\n          <span className=\"form_form-group-label\">Password</span>\n          <div className=\"form_form-group-field\">\n            <div className=\"form_form-group-icon\">\n              <KeyVariantIcon />\n            </div>\n            <Input\n              id=\"password\"\n              ref=\"password\"\n              name=\"password\"\n              type={this.state.showPassword ? 'text' : 'password'}\n              placeholder=\"Password\"\n              value = {this.state.password}\n              onChange={event => this.handleInputChange(event, 'password')}\n            />\n            <button\n              type=\"button\"\n              className={`form_form-group-button${showPassword ? ' active' : ''}`}\n              onClick={e => this.showPassword(e)}\n            ><EyeIcon />\n            </button>\n          </div>\n          <div className=\"error_div_container\">\n           {this.displayValidationErrors('password')}\n          </div>        \n        </div>\n        <div className=\"account_btns\">\n          <Link id=\"submit\" className=\"btn btn-primary account_btn signup_btn\" to={`/dashboard`} onClick={this.addUser}>Sign Up</Link>\n        </div>\n      </form>\n    );\n  }\n}","// Libraries\nimport { connect } from \"react-redux\";\n\n// Actions\nimport { signUp } from '../duck/Actions';\nimport SignUpForm from \"./SignUpForm\";\n\n// Types\nimport { AppState } from '../../../RootReducer'\n\ntype ConnectedSignInProps = {\n    history: any;\n}\n\nconst mapStateToProps = (state: AppState, ownProps: ConnectedSignInProps) => ({\n    signedIn: state.Account.signedIn,\n    history: ownProps.history\n});\n\nconst ConnectedSignUpForm = connect(\n    mapStateToProps,\n    {\n        signUp: signUp\n    }\n)(SignUpForm as any)\n\nexport default ConnectedSignUpForm;","// Libraries\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Components\nimport ConnectedSignUpForm from './ConnectedSignUpForm';\n\n// Styles\nimport '../account.scss';\n\ntype SignupProps = {\n    history: any;\n}\n\nexport default class SignUp extends React.PureComponent<SignupProps> {\n    render() {\n        return (\n            <div className=\"account\">\n                <div className=\"account_wrapper\">\n                <div className=\"account_card\">\n                    <ConnectedSignUpForm history={this.props.history}/>\n                    <div className=\"account_have-account\">\n                        <span>Already have an account? <Link to=\"/signin\">Login</Link></span>\n                    </div>\n                </div>\n                </div>\n            </div>\n        )\n    }\n};\n","// Libraries\nimport React, { PureComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Input } from 'reactstrap';\n\n// Icons\nimport EyeIcon from \"mdi-react/EyeIcon\";\nimport KeyVariantIcon from \"mdi-react/KeyVariantIcon\";\nimport AccountOutlineIcon from \"mdi-react/AccountOutlineIcon\";\n\n// Types \nimport { UpdateUserInfoAction } from '../duck/Types';\n\ntype SignInFormState = {\n\temail: string,\n\tpassword: string,\n    showPassword: boolean,\n}\n\ntype SignInFormProps = {\n\thistory: any;\n\tsignedIn: boolean;\n\tsignIn: (formData: SignInFormType) => UpdateUserInfoAction;\n}\n\nexport type SignInFormType = {\n\temail: string,\n\tpassword: string\n}\n\nexport default class SignInForm extends PureComponent<SignInFormProps, SignInFormState> {\n    state = {\n\t\temail: \"\",\n \t\tpassword: \"\",\n        showPassword: false\n    }\n\n\tcomponentDidUpdate(prevProps: SignInFormProps) {\n\t\tif (this.props.signedIn && this.props.signedIn !== prevProps.signedIn) {\n\t\t\tthis.props.history.push('/dashboard');\n\t\t}\n\t}\n\n\tcheckUser = (e: React.MouseEvent): void => {\n\t\t//fetch the data from loginUser\n\t\te.preventDefault();\n\n\t\tlet formData: SignInFormType = {\n\t\t\temail: this.state.email,\n\t\t\tpassword: this.state.password\n\t\t};\n\n\t\tif (!this.hasEmptyFields()) {\n\t\t\tthis.props.signIn(formData);\n\t\t}\n\t}\n\n\thandleInputChange = (event: React.ChangeEvent<HTMLInputElement>, inputPropName: string): void => {\n\t\tthis.setState<never>( {\n\t\t\t[inputPropName] : event.target.value\n\t\t});\n\t}\n\n\tshowPassword = (e: React.MouseEvent): void => {\n\t\te.preventDefault();\n\t\tthis.setState(prevState => ({ showPassword: !prevState.showPassword }));\n\t}\n\n\thasEmptyFields = () => {\n\t\treturn this.state.email === \"\" || this.state.password === \"\";\n\t}\n\n\trender() {\n\t\tconst { showPassword } = this.state;\n\n\t\treturn (\n\t\t\t<form className=\"form\">\n\t\t\t\t<div className=\"form_form-group\">\n\t\t\t\t\t<span className=\"form_form-group-label\">Username</span>\n\t\t\t\t\t<div className=\"form_form-group-field\">\n\t\t\t\t\t\t<div className=\"form_form-group-icon\">\n\t\t\t\t\t\t\t<AccountOutlineIcon />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Username\"\n \t\t\t\t\t\t\tvalue={this.state.email}\n \t\t\t\t\t\t\tonChange={event => this.handleInputChange(event, \"email\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"form_form-group\">\n\t\t\t\t\t<span className=\"form_form-group-label\">Password</span>\n\t\t\t\t\t<div className=\"form_form-group-field\">\n\t\t\t\t\t\t<div className=\"form_form-group-icon\">\n\t\t\t\t\t\t\t<KeyVariantIcon />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\ttype={showPassword ? \"text\" : \"password\"}\n\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t\tvalue={this.state.password}\n \t\t\t\t\t\t\tonChange={event => this.handleInputChange(event, \"password\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclassName={`form_form-group-button${\n\t\t\t\t\t\t\t\tshowPassword ? \" active\" : \"\"\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\tonClick={this.showPassword}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<EyeIcon />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"account_btns\">\n\t\t\t\t\t<Link\n\t\t\t\t\t\tclassName=\"btn btn-primary account_btn signin_btn\"\n\t\t\t\t\t\tto={`/dashboard`}\n \t\t\t\t\t\tonClick={this.checkUser}\n\t\t\t\t\t>\n\t\t\t\t\t\tSign In\n\t\t\t\t\t</Link>\n\t\t\t\t\t<Link className=\"btn btn-outline-primary account_btn signup_btn\" to=\"/signup\">\n\t\t\t\t\t\tCreate Account\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t);\n\t}\n}\n","// Libraries\nimport { connect } from \"react-redux\";\n\n// Actions\nimport { signIn } from '../duck/Actions';\n\n// Componenets\nimport SignInForm from \"./SignInForm\";\n\n// Types\nimport { AppState } from '../../../RootReducer'\n\ntype ConnectedSignInProps = {\n    history: any;\n}\n\nconst mapStateToProps = (state: AppState, ownProps: ConnectedSignInProps) => ({\n    signedIn: state.Account.signedIn,\n    history: ownProps.history\n});\n\nconst ConnectedSignInForm = connect(\n    mapStateToProps,\n    {\n        signIn: signIn\n    }\n)(SignInForm as any)\n\nexport default ConnectedSignInForm; ","// Libraries\nimport React from 'react';\n\n// Components\nimport ConnectedSignInForm from './ConnectedSignInForm';\n\ntype SigninProps = {\n    history: any;\n}\n\nexport default class SignIn extends React.PureComponent<SigninProps> {\n    render() {\n        return (\n            <div className=\"account\">\n                <div className=\"account_wrapper\">\n                    <div className=\"account_card\">\n                        <ConnectedSignInForm history={this.props.history}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","// Libraries\nimport { Dispatch } from 'redux';\n\n// Types\nimport { TravelPlanInfoType } from '../../UIKit/PlanModal/types';\n\nexport const INSERT_PLAN_ACTION = \"@@DASHBOARD/INSERT_PLAN_ACTION\";\nexport const FETCH_PLAN_ACTION = \"@@DASHBOARD/FETCH_PLAN_ACTION\";\nexport const EDIT_PLAN_ACTION = \"@@DASHBOARD/EDIT_PLAN_ACTION\";\nexport const DELETE_PLAN_ACTION = \"@@DASHBOARD/DELETE_PLAN_ACTION\";\nexport const UPDATE_FETCH_STATE_ACTION = \"@@DASHBOARD/UPDATE_FETCH_STATE_ACTION\";\n\nexport interface DashboardState {\n    loaded: boolean;\n    plans: TravelPlanInfoType[];\n}\n\nexport interface IInsertPlanAction {\n    type: typeof INSERT_PLAN_ACTION,\n    plan: TravelPlanInfoType\n}\n\nexport interface IFetchPlanAction {\n    type: typeof FETCH_PLAN_ACTION,\n    plans: TravelPlanInfoType[]\n}\n\nexport interface IEditPlanAction {\n    type: typeof EDIT_PLAN_ACTION,\n    plan: TravelPlanInfoType\n}\n\nexport interface IDeletePlanAction {\n    type: typeof DELETE_PLAN_ACTION,\n    planID: string\n}\n\nexport interface IUpdateFetchStateAction {\n    type: typeof UPDATE_FETCH_STATE_ACTION,\n    loaded: boolean\n}\n\nexport type InsertPlanAction = (dispatch: Dispatch) => Promise<IInsertPlanAction | void> | void;\nexport type FetchPlanAction = (dispatch: Dispatch) => Promise<IFetchPlanAction | void | unknown> | void;\nexport type EditPlanAction = (dispatch: Dispatch) => Promise<IEditPlanAction | void> | void;\nexport type DeletePlanAction = (dispatch: Dispatch) => Promise<IDeletePlanAction | void> | void;\nexport type UpdateFetchStateAction = (dispatch: Dispatch) => Promise<IUpdateFetchStateAction | void> | void;\n\nexport type DashboardAction = IInsertPlanAction | IFetchPlanAction | IEditPlanAction | IDeletePlanAction | IUpdateFetchStateAction;","// Libraries\nimport moment from 'moment';\n\nimport { TravelPlanInfoType } from \"../../UIKit/PlanModal/types\"\n\nexport const sortTravelPlans = (plans: TravelPlanInfoType[]): TravelPlanInfoType[] => {\n    return plans.sort(\n        (planA: TravelPlanInfoType, planB: TravelPlanInfoType): number => {\n            const time1 = moment(planA.timeCreated);\n            const time2 = moment(planB.timeCreated);\n\n            if (time1.isBefore(time2)){\n                return 1;\n            }\n\n            return -1;\n        }\n    )\n} ","// Libraries\nimport { Dispatch } from \"redux\";\nimport { batch } from \"react-redux\";\n\n// Types\nimport { TravelPlanInfoType, UserPlanLinkType } from \"../../UIKit/PlanModal/types\";\nimport {\n    INSERT_PLAN_ACTION,\n    IInsertPlanAction,\n    InsertPlanAction,\n    FetchPlanAction,\n    IFetchPlanAction,\n    FETCH_PLAN_ACTION,\n    EDIT_PLAN_ACTION,\n    IEditPlanAction,\n    EditPlanAction,\n    DeletePlanAction,\n    IDeletePlanAction,\n    DELETE_PLAN_ACTION,\n    IUpdateFetchStateAction,\n    UPDATE_FETCH_STATE_ACTION\n} from \"./Types\";\n\n// Util\nimport { sortTravelPlans } from './util';\n\nexport function createPlan (formData: TravelPlanInfoType): InsertPlanAction {\n    return (dispatch: Dispatch) => {\n        fetch('/api/createPlan', {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(formData)\n        })\n        .then(response => response.json())\n        .then(result => {\n            if (result.success) {\n                return dispatch(insertPlan(formData));\n            }\n            else {\n                // add error state dispatch\n                console.log(\"CREATE PLAN ACTION ERRORRRRRRRRRRR\");\n            }\n        });\n    }\n}\n\nexport function linkUserToPlan (formData: UserPlanLinkType): void {\n    fetch('/api/linkUserToPlan', {\n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData)\n    })\n    .then(response => response.json())\n    .then(result => {\n        if (!result.success) {\n            // add error state \n        }\n    });\n}\n\nexport function fetchPlansFromDB (username: string): FetchPlanAction {\n    return (dispatch: Dispatch) => {\n        fetch('/api/fetchPlansForUser', {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({email: username})\n        })\n        .then(response => response.json())\n        .then(res => {\n            if (res.success) {\n                // if the query was successful we use the ids we got to query the details of the plans\n                fetch('/api/getPlansInfoWithID', {\n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify(res.planIDs)\n                })\n                .then(response => response.json())\n                .then(res => {\n                    if (res.success) {\n                        return  batch (() => {\n                            dispatch(fetchPlans(sortTravelPlans(res.plans)));\n                            dispatch(updateFetchState(true));\n                        })\n                    }\n                });\n            }\n        });\n    }\n}\n\nexport function editPlan (formData: TravelPlanInfoType): EditPlanAction {\n    return (dispatch: Dispatch) => {\n        fetch('/api/editPlan', {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(formData)\n        })\n        .then(response => response.json())\n        .then(res => {\n            if (res.success) {\n                return dispatch(modifyPlan(formData));\n            }\n        });\n    }\n}\n\nexport function deletePlan (userLink: UserPlanLinkType): DeletePlanAction {\n    return (dispatch: Dispatch) => {\n        fetch('/api/deletePlan', {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(userLink)\n        })\n        .then(response => response.json())\n        .then(res => {\n            if (res.success) {\n                return dispatch(removePlan(userLink.planID));\n            }\n        });\n    }\n}\n\nfunction insertPlan (formData: TravelPlanInfoType): IInsertPlanAction {\n    return {\n        type: INSERT_PLAN_ACTION,\n        plan: formData\n    }\n}\n\nfunction fetchPlans (plans: TravelPlanInfoType[]): IFetchPlanAction {\n    return {\n        type: FETCH_PLAN_ACTION,\n        plans: plans\n    }\n}\n\nfunction modifyPlan (formData: TravelPlanInfoType): IEditPlanAction {\n    return {\n        type: EDIT_PLAN_ACTION,\n        plan: formData\n    }\n}\n\nfunction removePlan (planID: string): IDeletePlanAction {\n    return {\n        type: DELETE_PLAN_ACTION,\n        planID: planID\n    }\n}\n\nfunction updateFetchState (loaded: boolean): IUpdateFetchStateAction {\n    return {\n        type: UPDATE_FETCH_STATE_ACTION,\n        loaded: loaded\n    }\n}","export const isCreatePlan = (buttonText: string): boolean => {\n    return buttonText === \"Create\";\n}","export const trimTimeString = (str: string): string => {\n    return str.substring(0,10);\n}\n\nexport const mapTimeToString = (str: string): string => {\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    if (str) {\n        let month = months[parseInt(str.slice(5,7))-1];\n        let year = str.slice(0,4);\n\n        return month + \"-\" + year\n    }\n\n    return \"\";\n}","// Libraries\nimport moment from 'moment'\n\nexport const getCurrentTime = (): string => {\n    return moment().format('llll');\n}","// Libraries\nimport React from 'react';\nimport { Button, ButtonToolbar, Modal, Input } from 'reactstrap';\nimport uuid from 'uuid';\n\n// Types\nimport { TravelPlanInfoType, UserPlanLinkType } from './types';\nimport { InsertPlanAction, EditPlanAction } from '../../Dashboard/duck/Types';\n\n// Util\nimport { isCreatePlan } from './util';\nimport { trimTimeString } from '../../../utils/time';\nimport { getCurrentTime } from '../../../utils/utils';\n\ntype PlanModalProps = {\n    username: string;\n    item?: TravelPlanInfoType;\n    buttonName: string;\n    buttonText: string;\n    onClick: (formData: TravelPlanInfoType)=> InsertPlanAction | EditPlanAction;\n    onLinkUser?: (formdata: UserPlanLinkType) => void;\n}\n\ntype PlanModalState = {\n    planID: string;\n    isOpen: boolean;\n    hasDateError: boolean;\n    title: string;\n    start: string;\n    end: string;\n}\n\nexport default class PlanModal extends React.PureComponent<PlanModalProps, PlanModalState> {\n    state = {\n        planID: \"\",\n        isOpen: false,\n        hasDateError: false,\n        title: \"\",\n        start: \"\",\n        end: \"\"\n    }\n\n    toggleModal = (): void => {\n        if (!this.props.item && isCreatePlan(this.props.buttonText)){\n            this.setState(prevState => ({ \n                isOpen: !prevState.isOpen,\n                hasDateError: false,\n                planID: !prevState.isOpen ? uuid.v4() : \"\",\n                title: \"\",\n                start: \"\",\n                end: \"\"\n            }));\n        }\n        else {\n            this.setState(prevState => ({\n                isOpen: !prevState.isOpen,\n                hasDateError: false,\n                planID: this.props.item ? this.props.item.planID : uuid.v4(),\n                title: this.props.item ? this.props.item.title : \"\",\n                start: this.props.item ? trimTimeString(this.props.item.start) : \"\",\n                end: this.props.item ? trimTimeString(this.props.item.end) : \"\"\n            }));\n        }\n    }\n\n\thandleInputChange = (event: React.ChangeEvent<HTMLInputElement>, inputPropName: string): void => {\n\t\tthis.setState<never>( {\n\t\t\t[inputPropName] : event.target.value\n        }, () => {\n            if (inputPropName === \"start\" || inputPropName === \"end\") {\n                if (this.state.start !== \"\" && this.state.end !== \"\") {\n                    // Check end date and start date\n                    const start = new Date(this.state.start);\n                    const end = new Date(this.state.end);\n\n                    if (start.getTime() > end.getTime()) {\n                        this.setState({ hasDateError: true });\n                    }\n                    else {\n                        this.setState({ hasDateError: false });\n                    }\n                }\n            }\n        });\n    }\n    \n    hasEmptyField = (): boolean | undefined => {\n        return this.state.title === \"\" || this.state.start === \"\" || this.state.end === \"\" || this.state.hasDateError;\n    }\n\n    createPlan = (e: React.MouseEvent): void => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const formData: TravelPlanInfoType = {\n            planID: this.state.planID,\n            title: this.state.title,\n            start: this.state.start,\n            end: this.state.end,\n            timeCreated: getCurrentTime()\n        }\n\n        const linkData: UserPlanLinkType = {\n            email: this.props.username,\n            planID: this.state.planID\n        }\n\n        this.props.onClick(formData);\n        this.props.onLinkUser && this.props.onLinkUser(linkData);\n\n        this.toggleModal();\n    }\n\n    editPlan = (e: React.MouseEvent): void => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const formData: TravelPlanInfoType = {\n            planID: this.state.planID,\n            title: this.state.title,\n            start: this.state.start,\n            end: this.state.end,\n            timeCreated: getCurrentTime()\n        }\n\n        this.props.onClick(formData);\n\n        this.toggleModal();\n    }\n\n    render() {\n        return (\n            <div  className=\"theme-light wrapper blocks-with-shadow-theme top-navigation\">\n                <Button\n                    outline={false}\n                    size='sm'\n                    color='primary'\n                    btn={this.props.buttonName}\n                    className=\"icon account_btn\"\n                    onClick={this.toggleModal}\n                >\n                    {this.props.buttonText} Plan\n                </Button>\n                <Modal\n                    isOpen={this.state.isOpen}\n                    toggle={this.toggleModal}\n                    className={\"modal-dialog--primary theme-light\"}\n                >\n                    <div className=\"modal_header\">\n                        <button className=\"lnr lnr-cross modal_close-btn\" type=\"button\" onClick={this.toggleModal} />\n                        <h4 className=\"modal_title\">{this.props.buttonName}</h4>\n                    </div>\n                    <div className=\"dashboard_place-order-form\">\n                    <form className=\"form form--vertical\" >\n                            <div className=\"form_form-group\">\n                                <span className=\"form_form-group-label\">Plan Title</span>\n                                <div className=\"form_form-group-field\">\n                                    <Input\n                                        name=\"title\"\n                                        type=\"text\"\n                                        placeholder=\"Title\"\n                                        value={this.state.title}\n                                        onChange={event => this.handleInputChange(event, \"title\")}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"form_form-group\">\n                                <span className=\"form_form-group-label\">Start Date</span>\n                                <div className=\"form_form-group-field\">\n                                    <Input\n                                        name=\"startDate\"\n                                        type=\"date\"\n                                        placeholder=\"yyyy-mm-dd\"\n                                        value={this.state.start}\n                                        onChange={event => this.handleInputChange(event, \"start\")}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"form_form-group\">\n                                <span className=\"form_form-group-label\">End Date</span>\n                                <div className=\"form_form-group-field\">\n                                    <Input\n                                        name=\"endDate\"\n                                        type=\"date\"\n                                        placeholder=\"yyyy-mm-dd\"\n                                        value={this.state.end}\n                                        onChange={event => this.handleInputChange(event, \"end\")}\n                                    />\n                                </div>\n                                <span style={{display: this.state.hasDateError ? \"\" : \"none\", color: \"red\"}}>The end date needs to be after the start date.</span>\n                            </div>\n                            <ButtonToolbar className=\"modal_footer\">\n                                <Button outline={false} color=\"primary\" type=\"submit\" disabled={this.hasEmptyField()} onClick={this.props.buttonText === \"Create\" ? this.createPlan : this.editPlan}>{this.props.buttonText}</Button>\n                                <Button onClick={this.toggleModal}>Cancel</Button>\n                            </ButtonToolbar>\n                        </form>\n                    </div>\n                </Modal>\n            </div>\n        )\n    }\n}","// Libraries\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Components\nimport PlanModal from '../PlanModal/PlanModal';\n\n// Actions\nimport { EditPlanAction, DeletePlanAction } from '../../Dashboard/duck/Types';\n\n// Types\nimport { TravelPlanInfoType, UserPlanLinkType } from '../PlanModal/types';\n\n// Utils\nimport { trimTimeString } from '../../../utils/time';\n\ntype BoardItemProps = {\n    item: TravelPlanInfoType;\n    username: string;\n    editPlan: (formData: TravelPlanInfoType) => EditPlanAction;\n    deletePlan: (userLink: UserPlanLinkType) => DeletePlanAction;\n}\n\nexport default class BoardItem extends React.PureComponent<BoardItemProps> {\n  deletePlan = (e: React.MouseEvent): void => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const userLink: UserPlanLinkType = {\n      email: this.props.username,\n      planID: this.props.item.planID\n    };\n\n    this.props.deletePlan(userLink);\n  }\n\n  render() {\n    return (\n      <div className=\"board\">\n        <Link to={`/plan/${this.props.item.planID}`}>\n          <div className=\"board_style\">\n              <div className=\"board_img-wrap\">\n                {/* <img className=\"board_img\" src={\"\"} alt=\"board-img\" />  */}\n                <div className=\"board_img_rect\"/>\n              </div>\n              <div className=\"board_info\">\n                <Link className=\"board_link\" to={`/plan/${this.props.item.planID}`}>\n                  <h4 className=\"board_title\">{this.props.item.title}</h4>\n                </Link>\n              <p className=\"board_description\">{trimTimeString(this.props.item.start)}</p>\n                {/*{item.collaborators.map((c, index) => (\n                  <span\n                    key={index}\n                  />\n                ))} */}\n              </div>\n          </div>\n        </Link>\n        <div className=\"board_btn\">\n          <PlanModal\n            item={this.props.item}\n            username={this.props.username}\n            buttonName=\"Edit plan\"\n            buttonText=\"Edit\"\n            onClick={this.props.editPlan}\n          />\n          <button \n            className=\"lnr lnr-cross board_close-btn\" \n            type=\"button\" \n            onClick={this.deletePlan} />\n        </div>\n      </div>\n    )\n  }\n}","// Libraries\nimport React from 'react';\n\n// Types\nimport { TravelPlanInfoType, UserPlanLinkType } from '../PlanModal/types';\n\n// Actions\nimport { EditPlanAction, DeletePlanAction } from '../../Dashboard/duck/Types';\n\n// Components\nimport BoardItem from './BoardItem';\n\ntype BoardItemsProps = {\n    username: string;\n    items: TravelPlanInfoType[];\n    editPlan: (formData: TravelPlanInfoType) => EditPlanAction;\n    deletePlan: (userLink: UserPlanLinkType) => DeletePlanAction;\n}\n\nexport default class BoardItems extends React.PureComponent<BoardItemsProps> {\n    \n  render() {\n    return (\n      <div className=\"boards_wrap\">\n        <div className=\"boards\">\n          {this.props.items.map((item, i) => (\n            <BoardItem\n              key={item.planID}\n              item={item}\n              username={this.props.username}\n              editPlan={this.props.editPlan}\n              deletePlan={this.props.deletePlan}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\n\nexport default class BoardsLoadingIndicator extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"board\">\n                <div className=\"board_style\">\n                    <div className=\"board_img-wrap\">\n                        <div className=\"board_img_rect_loading\"/>\n                    </div>\n                    <div className=\"board_info\">\n                        <div className=\"board_link\" >\n                            <div className=\"board_title_loading\"/>\n                        </div>\n                        <div className=\"board_description_loading\"/>\n                    </div>\n                </div>\n\n                <div className=\"board_btn\">\n                    <div className=\"account_btn_loading\" />\n                    <div className=\"lnr lnr-cross board_close-btn_loading\" />\n                </div>\n            </div>\n        )\n    }\n}","// Libraries \nimport React from \"react\";\nimport { Col, Container, Row } from \"reactstrap\";\n\n// Components\nimport PlanModal from '../UIKit/PlanModal/PlanModal';\nimport BoardItems from \"../UIKit/BoardItems/BoardItems\";\nimport BoardsLoadingIndicator from '../UIKit/LoadingState/BoardsLoadingIndicator';\n\n// Types\nimport { TravelPlanInfoType, UserPlanLinkType } from '../UIKit/PlanModal/types';\nimport { InsertPlanAction, FetchPlanAction, EditPlanAction, DeletePlanAction } from './duck/Types';\n\n// Actions\nimport { linkUserToPlan } from \"./duck/Actions\";\n\ntype DashboardProps = {\n    username: string;\n    plans: TravelPlanInfoType[];\n    loaded: boolean;\n    createPlan: (formData: TravelPlanInfoType) => InsertPlanAction;\n    editPlan: (formData: TravelPlanInfoType) => EditPlanAction;\n    deletePlan: (userLink: UserPlanLinkType) => DeletePlanAction;\n    fetchPlansFromDB: (username: string) => FetchPlanAction;\n}\n\ntype DashboardState = {\n    showLoadingState: boolean;\n}\n\nclass Dashboard extends React.PureComponent<DashboardProps, DashboardState> {\n    state = {\n        showLoadingState: false\n    }\n\n    componentDidMount () {\n        setTimeout(() => {\n            this.setState({showLoadingState: true});\n        }, 20);\n        this.props.fetchPlansFromDB(this.props.username);\n    }\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Col md={12}>\n                        <h3 className=\"page-title\">Boards</h3>\n                        <h3 className=\"page-subhead subhead\">\n\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\tClick on a board to view your activity\n\t\t\t\t\t\t</h3>\n                        <div className=\"board_createbtn\">\n\t\t\t\t\t\t\t<PlanModal\n                                username={this.props.username}\n                                buttonName=\"Create a Plan\"\n                                buttonText=\"Create\"\n                                onClick={this.props.createPlan}\n                                onLinkUser={linkUserToPlan}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12} lg={12}>\n                        {!this.props.loaded && this.state.showLoadingState &&\n                            <div className=\"boards_wrap\">\n                                <div className=\"boards\">\n                                    <BoardsLoadingIndicator/>   \n                                </div>\n                            </div> \n                        }\n                        <BoardItems\n                            username={this.props.username}\n                            items={this.props.plans}\n                            editPlan={this.props.editPlan}\n                            deletePlan={this.props.deletePlan}\n                        />\n                    </Col>\n\t\t\t\t</Row>\n            </Container>\n        )\n    }\n}\n\nexport default Dashboard;","// Libraries\nimport { connect } from \"react-redux\";\n\n// Actions\nimport { createPlan, fetchPlansFromDB, editPlan, deletePlan } from './duck/Actions'\n\n// Components\nimport Dashboard from './Dashboard';\n\n// Types\nimport { AppState } from '../../RootReducer';\n\nconst mapStateToProps = (state: AppState) => ({\n    username: state.Account.userName,\n    plans: state.Plans.plans,\n    loaded: state.Plans.loaded\n});\n\nconst ConnectedDashboard = connect(\n    mapStateToProps,\n    {\n        createPlan: createPlan,\n        editPlan: editPlan,\n        deletePlan: deletePlan,\n        fetchPlansFromDB: fetchPlansFromDB\n    }\n)(Dashboard as any)\n\nexport default ConnectedDashboard;","// Libraries\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\ntype PrivateRouteProps = {\n    signedIn: boolean,\n    path: string,\n\tcomponent: any\n}\n\nexport default class PrivateRoute extends React.PureComponent<PrivateRouteProps> {\n    render() {\n        return (\n            this.props.signedIn ? (\n                <Route path={this.props.path} render={props => \n                    <this.props.component {...props}/>\n                }/>\n            ): <Redirect to=\"/\"/>\n        );\n    }\n}\n","// Libraries\nimport { connect } from \"react-redux\";\n\n// Components\nimport PrivateRoute from \"./PrivateRoute\"\n\n// Types\nimport { AppState } from '../../RootReducer'\n\ntype PrivateRouteProps = {\n    path: string,\n\tcomponent: any\n}\n\nconst mapStateToProps = (state: AppState, ownProps: PrivateRouteProps) => ({\n    signedIn: state.Account.signedIn,\n    path: ownProps.path,\n    component: ownProps.component\n});\n\nconst ConnectedPrivateRoute = connect(\n    mapStateToProps,\n    null\n)(PrivateRoute as any)\n\nexport default ConnectedPrivateRoute; ","// Libraries\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\ntype TopBarMenuLinkProps = {\n    path: string;\n    icon: string;\n    title: string;\n    onClick?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;\n}\n\nexport default class TopBarMenuLink extends React.PureComponent<TopBarMenuLinkProps> {\n    render() {\n        return (\n            <Link className=\"topbar_link\" to={this.props.path} onClick={this.props.onClick}>\n                <span className={`topbar_link-icon lnr lnr-${this.props.icon}`} />\n                <p className=\"topbar_link-title\">{this.props.title}</p>\n            </Link>\n        )\n    }\n}","export const isTrue = (str: string): boolean => {\n    return str === \"true\";\n}\n\nexport const capitalize = (str: string): string => {\n    return str.length ? str.charAt(0).toUpperCase() + str.substring(1) : str;\n}\n\n","// Libraries\nimport React from 'react';\nimport { Collapse } from 'reactstrap';\n\n// Icons\nimport DownIcon from 'mdi-react/ChevronDownIcon';\n\n// Types \nimport { UpdateUserInfoAction } from '../Account/duck/Types';\n\n// Components\nimport TopBarMenuLink from './TopBarMenuLink';\n\n// Utils\nimport {capitalize} from '../../utils/strings';\n\ntype TopBarProfileProps = {\n  fname: string;\n  lname: string;\n  signOut: () => UpdateUserInfoAction;\n}\n\ntype TopBarProfileState = {\n  collapsed: boolean;\n}\n\nexport default class TopBarProfile extends React.PureComponent<TopBarProfileProps, TopBarProfileState> {\n  state = {\n    collapsed: false\n  }\n\n  // Ava = `${process.env.PUBLIC_URL}/img/ava.png`;\n\n  toggle = () => {\n    this.setState(prevState => ({collapsed: !prevState.collapsed}));\n  }\n\n  render() {\n    return (\n      <div className=\"topbar_profile\">\n        <button className=\"topbar_avatar\" type=\"button\" onClick={this.toggle} style={{backgroundColor: this.state.collapsed ? \"#eeebeb\" : \"\"}}>\n          {/* <img className=\"topbar_avatar-img\" src={this.Ava} alt=\"avatar\" /> */}\n          <div className=\"topbar_avatar_holder\"/>\n          <p className=\"topbar_avatar-name\">{capitalize(this.props.fname) + \" \" + capitalize(this.props.lname)}</p>\n          <DownIcon className=\"topbar_icon\" />\n        </button>\n        \n        {this.state.collapsed && <button className=\"topbar_back\" type=\"button\" onClick={this.toggle} />}\n        \n        <Collapse isOpen={this.state.collapsed} className=\"topbar_menu-wrap\">\n          <div className=\"topbar_menu\">\n            <TopBarMenuLink title=\"Home\" icon=\"home\" path=\"/\" />\n            <TopBarMenuLink title=\"My Profile\" icon=\"user\" path=\"/\" />\n            <TopBarMenuLink title=\"Sign Out\" icon=\"exit\" path=\"/\" onClick={this.props.signOut}/>\n          </div>\n        </Collapse>\n      </div>\n    )\n  }\n}","// Libraries\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Components\nimport TopBarProfile from './TopBarProfile';\n\n// Types \nimport { UpdateUserInfoAction } from '../Account/duck/Types';\n\ntype TopNavigationBarProps = {\n    fname: string;\n    lname: string;\n    signOut: () => UpdateUserInfoAction;\n}\n\nexport default class TopNavigationBar extends React.PureComponent<TopNavigationBarProps> {\n    render() {\n        return (\n            <div className={\"layout layout--top-navigation\"}>\n                <div className=\"topbar topbar--navigation\">\n                    <div className=\"topbar_wrapper\">\n                    <div className=\"topbar_left\">\n                        <Link className=\"topbar_logo\" to=\"/dashboard/\"/>\n                    </div>\n                    <div className=\"topbar_right\">\n                        <TopBarProfile fname={this.props.fname} lname={this.props.lname} signOut={this.props.signOut}/>\n                    </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","// Libraries\nimport { connect } from \"react-redux\";\n\n// Components\nimport TopNavigationBar from \"./TopNavigationBar\"\n\n// Types\nimport { AppState } from '../../RootReducer'\n\n// Actions\nimport {signOut} from '../Account/duck/Actions';\n\nconst mapStateToProps = (state: AppState) => ({\n    fname: state.Account.fname,\n    lname: state.Account.lname\n});\n\nconst ConnectedTopNavigationBar = connect(\n    mapStateToProps,\n    {\n        signOut: signOut\n    }\n)(TopNavigationBar as any)\n\nexport default ConnectedTopNavigationBar; ","// Libraries\nimport { Dispatch } from 'redux';\n\n// Types\nimport { TravelPlanInfoType } from '../../UIKit/PlanModal/types';\n\nexport const UPDATE_CURRENT_PLAN_ACTION = \"@@PLANPAGE/UPDATE_CURRENT_PLAN_ACTION\";\nexport const CLEAR_CURRENT_PLAN_ACTION = \"@@PLANPAGE/CLEAR_CURRENT_PLAN_ACTION\";\n\nexport interface PlanPageState extends TravelPlanInfoType {\n    planID: string;\n    title: string;\n    start: string;\n    end: string;\n    timeCreated: string;\n}\n\nexport interface IUpdateCurrentPlanAction {\n    type: typeof UPDATE_CURRENT_PLAN_ACTION;\n    plan: TravelPlanInfoType\n}\n\nexport interface IClearCurrentPlanAction {\n    type: typeof CLEAR_CURRENT_PLAN_ACTION;\n}\n\nexport type ClearPlanAction = (dispatch: Dispatch) => IClearCurrentPlanAction;\nexport type UpdateCurrentPlanAction = (dispatch: Dispatch) => Promise<IUpdateCurrentPlanAction | void> | void;\n\nexport type PlanPageAction = IUpdateCurrentPlanAction | IClearCurrentPlanAction;","export const getPlanIDFromURL = (): string => {\n    if (window\n        && \"location\" in window\n        && \"protocol\" in window.location\n        && \"pathname\" in window.location\n        && \"host\" in window.location) {\n            let URL = window.location.pathname;\n            return URL.substring(6);\n        };\n\n    return \"\";\n} ","// Libraries\nimport React from 'react';\nimport {Card, CardBody, Col} from 'reactstrap';\n\n// Utils\nimport { mapTimeToString } from \"../../../utils/time\";\n\ntype PlanInfoCardProps = {\n    planID: string;\n    planTitle: string;\n    planStartDate: string;\n}\n\nclass PlanInfoCard extends React.PureComponent <PlanInfoCardProps> {\n    render() {\n        return (\n            <Col md={12} lg={12} xl={12}>\n                <Card>\n                    <CardBody className=\"profile_card\">\n                        <div className=\"profile_information\">\n                            <div className=\"profile_avatar_holder\"/>\n                            {/* <a href=\"/gallery\">\n                                <img src={Ava} alt=\"avatar\" />\n                            </a> */}\n                            <div className=\"profile_data\">\n                                <p className=\"profile_name\">{this.props.planTitle}</p>\n                                <p className=\"profile_work\">{mapTimeToString(this.props.planStartDate)}</p>\n                                {/* <EditAuthor planID={this.state.planID}/> */}\n                            </div>\n                        </div>\n                        {/* <div className=\"profile_stats\">\n                            {this.state.collabList}\n                        </div> */}\n                    </CardBody>\n                </Card>\n            </Col>\n        )\n    }\n}\n\nexport default PlanInfoCard;","// Libraries \nimport React from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\n\nclass Calendar extends React.PureComponent {\n    render () {\n        return (\n            <div className=\"CalendarDashboard\">\n                <div className=\"Calendar\">\n                    <FullCalendar\n                        timeZone={\"UTC\"}\n                        defaultView=\"dayGridMonth\"\n                        allDaySlot={false}\n                        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n                        droppable={true}\n                        contentHeight={575}\n                        themeSystem=\"bootstrap\"\n                        header = {{\n                            left: \"today, prev,next\",\n                            center: \"title\",\n                            right: \"dayGridMonth,timeGridWeek,timeGridDay\"\n                        }}\n                        handleWindowResize={true}\n                        editable={true}\n                        selectable={true}\n                        selectMirror={true}\n                        eventDurationEditable={true}\n                    />\n                </div>\n                \n            </div>\n        )\n    }\n}\n\nexport default Calendar;","// Libraries \nimport React from \"react\";\nimport { Card, CardBody } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\n// components\nimport Calendar from \"./Calendar\";\n\nclass CalendarContainer extends React.PureComponent {\n    render() {\n        return (\n            <Card>\n\t\t\t\t<CardBody className=\"profile_card--calendar\">\n                        <Calendar/>\n                </CardBody>\n            </Card>\n        )\n    }\n}\n\nexport default CalendarContainer;","// Libraries \nimport React from \"react\";\nimport { Col, Card, CardBody } from \"reactstrap\";\n\nclass PlanPageFeatureContainer extends React.PureComponent {\n    render() {\n        return (\n            <Col md={12} lg={12} xl={12}>\n\t\t\t\t<Card>\n\t\t\t\t\t<CardBody className=\"profile__card placeholder\">\n\t\t\t\t\t\tPLACEHOLDER\n\t\t\t\t\t</CardBody>\n\t\t\t\t</Card>\n\t\t\t</Col>\n        )\n    }\n}\n\nexport default PlanPageFeatureContainer;","// Libraries \nimport React from \"react\";\nimport { Col, Container, Row } from \"reactstrap\";\n\n// Utils\nimport { getPlanIDFromURL } from \"../../utils/url\";\nimport { ClearPlanAction, UpdateCurrentPlanAction } from \"./duck/Types\";\n\n// Components\nimport PlanInfoCard from \"../UIKit/PlanPageCards/PlanInfoCard\";\nimport CalendarContainer from \"../Calendar/CalanderContainer\";\nimport FeatureContainer from \"../PlanPageFeatureTabs/FeatureContainer\";\n\ntype PlanPageProps = {\n    currentPlanID: string;\n    currentPlanTitle: string;\n    currentPlanStartDate: string;\n    getCurrentPlanInfo: (planID: string) => UpdateCurrentPlanAction;\n    clearPlanPage: () => ClearPlanAction;\n}\n\nclass PlanPage extends React.PureComponent<PlanPageProps> {\n    state = {\n    }\n\n    componentWillMount() {\n        const planID = getPlanIDFromURL();\n        this.props.getCurrentPlanInfo(planID);\n    }\n\n    componentWillUnmount() {\n        this.props.clearPlanPage();\n    }\n\n    render() {\n        return (\n            <Container>\n                <div className=\"profile\">\n                    <Row>\n                        <Col md={12} lg={12} xl={4}>\n                            <Row>\n                                <PlanInfoCard\n                                    planID={this.props.currentPlanID}\n                                    planTitle={this.props.currentPlanTitle}\n                                    planStartDate={this.props.currentPlanStartDate}\n                                />\n                                <FeatureContainer />\n                            </Row>\n                        </Col>\n                        <Col md={12} lg={12} xl={8}>\n                            <CalendarContainer/>\n                        </Col>\n                    </Row>\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default PlanPage;","// Libraries\nimport { connect } from \"react-redux\";\n\n// Actions\nimport { clearPlanPage, getCurrentPlanInfo } from \"./duck/Actions\";\n\n// Components\nimport PlanPage from './PlanPage';\n\n// Types\nimport { AppState } from \"../../RootReducer\";\n\nconst mapStateToProps = (state: AppState) => ({\n    currentPlanID: state.PlanPage.planID,\n    currentPlanTitle: state.PlanPage.title,\n    currentPlanStartDate: state.PlanPage.start\n})\n\nconst ConnectedPlanPage = connect(\n    mapStateToProps,\n    {\n        getCurrentPlanInfo: getCurrentPlanInfo,\n        clearPlanPage: clearPlanPage,\n    }\n)(PlanPage as any)\n\nexport default ConnectedPlanPage;","// Libraries\nimport { Dispatch } from \"redux\";\n\n// Types\nimport { ClearPlanAction, IClearCurrentPlanAction, CLEAR_CURRENT_PLAN_ACTION, UpdateCurrentPlanAction, IUpdateCurrentPlanAction, UPDATE_CURRENT_PLAN_ACTION } from \"./Types\";\nimport { TravelPlanInfoType } from \"../../UIKit/PlanModal/types\";\n\nexport function getCurrentPlanInfo (planID: string): UpdateCurrentPlanAction {\n        return (dispatch: Dispatch) => {\n            fetch('/api/getPlanInfoWithID', {\n                method: \"POST\",\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({planID: planID})\n            })\n            .then(response => response.json())\n            .then(result => {\n                if (result.success) {\n                    return dispatch(fetchCurrentPlan(result.plan));\n                }\n                else {\n                    // add error state dispatch\n                    console.log(\"Fetch plan info error\");\n                }\n            });\n        }\n}\n\nexport function clearPlanPage (): ClearPlanAction {\n    return (dispatch: Dispatch) => {\n        return dispatch(clearPlan());\n    }\n}\n\nfunction fetchCurrentPlan (plan: TravelPlanInfoType): IUpdateCurrentPlanAction {\n    return {\n        type: UPDATE_CURRENT_PLAN_ACTION,\n        plan: plan\n    }\n}\n\nfunction clearPlan (): IClearCurrentPlanAction {\n    return {\n        type: CLEAR_CURRENT_PLAN_ACTION\n    }\n}","// Libraries\nimport React from \"react\";\nimport { Router, Route, Switch, Redirect } from \"react-router-dom\";\n\n// Components \nimport SignUp from '../Account/Signup/SignUp';\nimport SignIn from '../Account/SignIn/SignIn';\nimport ConnectedDashboard from '../Dashboard/ConnectedDashboard';\nimport ConnectedPrivateRoute from './ConnectedPrivateRoute';\nimport ConnectedTopNavigationBar from '../TopNavigationBar/ConnectedTopNavigationBar';\nimport ConnectedPlanPage from '../PlanPage/ConnectedPlanPage';\n\ntype RouterProp = {\n    history: any;\n    signedIn: boolean;\n}\n\nconst wrappedRoutes = () => (\n    <>\n        <ConnectedTopNavigationBar/>\n        <div className=\"container_wrap\">\n            <Route exact path=\"/dashboard\">\n                <ConnectedDashboard/>\n            </Route>\n            <Route exact path=\"/plan/:planID\">\n                <ConnectedPlanPage/>\n            </Route>\n        </div>\n    </>\n)\n\nexport default class AppRouter extends React.PureComponent<RouterProp> {\n    render() {\n        return (\n            <Router history={this.props.history}>\n                <Switch>\n                    <Route exact path=\"/\">\n                        {\n                            this.props.signedIn ? \n                                <Redirect to=\"/dashboard\"/> :\n                                <SignIn history={this.props.history}/>\n                        }\n                    </Route>\n                    <Route exact path=\"/signup\">\n                        {\n                            this.props.signedIn ? \n                                <Redirect to=\"/dashboard\"/> :\n                                <SignUp history={this.props.history}/>\n                        }\n                    </Route>\n                    <Route path=\"/signin\">\n                        {\n                            this.props.signedIn ? \n                                <Redirect to=\"/dashboard\"/> :\n                                <SignIn history={this.props.history}/>\n                        }\n                    </Route>\n                    <ConnectedPrivateRoute path=\"/\" component={wrappedRoutes}/>\n                </Switch>\n            </Router>\n        );\n    }\n}","// Libraries\nimport { connect } from \"react-redux\";\n\n// Components\nimport Router from \"./Router\"\n\n// Types\nimport { AppState } from '../../RootReducer'\n\ntype RouterProps = {\n    history: any\n}\n\nconst mapStateToProps = (state: AppState, ownProps: RouterProps) => ({\n    signedIn: state.Account.signedIn,\n    history: ownProps.history\n});\n\nconst ConnectedRouter = connect(\n    mapStateToProps,\n    null\n)(Router as any)\n\nexport default ConnectedRouter; ","// Libraries\nimport React from 'react';\nimport { createBrowserHistory } from 'history';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n// Styles\nimport './App.scss';\n\n// Components\nimport ConnectedRouter from './Components/Router/ConnectedRouter';\n\nconst history = createBrowserHistory();\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"theme-light\">\n      <div className=\"wrapper blocks-with-shadow-theme top-navigation\">\n        <ConnectedRouter history={history}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// Types\nimport { AccountState,\n        AccountAction, \n        UPDATE_ACCOUNT_SIGNED_IN_ACTION,\n        UPDATE_USER_INFO_ACTION\n} from './Types';\n\n// Utils\nimport {isTrue} from \"../../../utils/strings\"\n\nconst initialState: AccountState  = {\n    userName: localStorage.username,\n    fname: localStorage.fname,\n    lname: localStorage.lname,\n    signedIn: isTrue(localStorage.signedIn)\n}\n\nconst Account = ( state: AccountState = initialState, action: AccountAction): AccountState => {\n    switch (action.type){\n        case UPDATE_USER_INFO_ACTION:\n            return {\n                userName: action.userName,\n                fname: action.fname,\n                lname: action.lname,\n                signedIn: state.signedIn,\n            }\n        case UPDATE_ACCOUNT_SIGNED_IN_ACTION:\n            return {\n                userName: state.userName,\n                fname: state.fname,\n                lname: state.lname,\n                signedIn: action.signedIn,\n            }\n        default: \n            return state;\n    }\n}\n\nexport default Account;","// Types\nimport { \n    DashboardState,\n    DashboardAction,\n    INSERT_PLAN_ACTION,\n    FETCH_PLAN_ACTION, \n    EDIT_PLAN_ACTION,\n    DELETE_PLAN_ACTION,\n    UPDATE_FETCH_STATE_ACTION\n} from './Types';\nimport { TravelPlanInfoType } from '../../UIKit/PlanModal/types';\n\nconst initialState: DashboardState = {\n    loaded: false,\n    plans: []\n}\n\nconst Plans = ( state: DashboardState = initialState, action: DashboardAction): DashboardState => {\n    let plansArr: TravelPlanInfoType[] = [];\n\n    switch( action.type ) {\n        case INSERT_PLAN_ACTION:\n            plansArr.push(action.plan);\n            plansArr = plansArr.concat(state.plans);\n            \n            return {\n                loaded: state.loaded,\n                plans: plansArr\n            }\n\n        case FETCH_PLAN_ACTION:\n\n            return {\n                loaded: state.loaded,\n                plans: action.plans\n            }\n\n        case EDIT_PLAN_ACTION:\n            state.plans.forEach(plan => {\n                if (plan.planID !== action.plan.planID) {\n                    plansArr.push(plan);\n                }\n                else {\n                    plansArr.push(action.plan);\n                }\n            })\n\n            return {\n                loaded: state.loaded,\n                plans: plansArr\n            }\n\n        case DELETE_PLAN_ACTION:\n            state.plans.forEach(plan => {\n                if (plan.planID !== action.planID) {\n                    plansArr.push(plan);\n                }\n            })\n\n            return {\n                loaded: state.loaded,\n                plans: plansArr\n            }\n\n        case UPDATE_FETCH_STATE_ACTION: \n            return {\n                loaded: action.loaded,\n                plans: state.plans\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport default Plans;","// Types\nimport { PlanPageState, PlanPageAction, CLEAR_CURRENT_PLAN_ACTION, UPDATE_CURRENT_PLAN_ACTION} from \"./Types\";\n\nconst initialState: PlanPageState = {\n    planID: \"\",\n    title: \"\",\n    start: \"\",\n    end: \"\",\n    timeCreated: \"\"\n}\n\nconst PlanPage = (state: PlanPageState = initialState, action: PlanPageAction) => {\n    switch (action.type){\n        case UPDATE_CURRENT_PLAN_ACTION:\n            return {\n                planID: action.plan.planID,\n                title: action.plan.title,\n                start: action.plan.start,\n                end: action.plan.end,\n                timeCreated: action.plan.timeCreated\n            }\n        case CLEAR_CURRENT_PLAN_ACTION:\n            return {\n                planID: \"\",\n                title: \"\",\n                start: \"\",\n                end: \"\",\n                timeCreated: \"\"\n            }\n        default:\n            return state;\n    }\n}\n\nexport default PlanPage;","// Libraries\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\n// Types\nimport { AccountState } from './Components/Account/duck/Types';\nimport { DashboardState } from './Components/Dashboard/duck/Types';\nimport { PlanPageState } from './Components/PlanPage/duck/Types';\n\n// Reducers\nimport Account from './Components/Account/duck/Reducer';\nimport Plans from './Components/Dashboard/duck/Reducer';\nimport PlanPage from './Components/PlanPage/duck/Reducer';\n\nconst rootReducer = combineReducers({\n    Account,\n    Plans,\n    PlanPage\n});\n\nexport type AppState = {\n    Account: AccountState;\n    Plans: DashboardState;\n    PlanPage: PlanPageState\n}\n\nexport default function configureStore() {\n    return createStore (\n        rootReducer,\n        composeWithDevTools(\n            applyMiddleware(thunk)\n        )\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Libraries\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\n// Components\nimport App from './App';\nimport configureStore from './RootReducer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}